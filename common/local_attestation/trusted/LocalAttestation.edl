enclave  {
    include "sgx_eid.h"
    include "common/local_attestation/datatypes.h"
    include "common/local_attestation/dh_session_protocol.h"

    trusted{
        // for source enclave
        public uint32_t ecall_create_session(sgx_enclave_id_t src_enclave_id, 
                                             sgx_enclave_id_t dest_enclave_id);
        public uint32_t ecall_enclave_to_enclave_call(sgx_enclave_id_t src_enclave_id, 
                                                      sgx_enclave_id_t dest_enclave_id);
        public uint32_t ecall_message_exchange(sgx_enclave_id_t src_enclave_id, 
                                               sgx_enclave_id_t dest_enclave_id);
        public uint32_t ecall_close_session(sgx_enclave_id_t src_enclave_id, 
                                            sgx_enclave_id_t dest_enclave_id);

        // for destination enclave
        public uint32_t ecall_session_request(sgx_enclave_id_t src_enclave_id, 
                                              [out] sgx_dh_msg1_t *dh_msg1, 
                                              [out] uint32_t *session_id);
        public uint32_t ecall_exchange_report(sgx_enclave_id_t src_enclave_id, 
                                              [in] sgx_dh_msg2_t *dh_msg2, 
                                              [out] sgx_dh_msg3_t *dh_msg3, 
                                              uint32_t session_id);
        public uint32_t ecall_generate_response(sgx_enclave_id_t src_enclave_id, 
                                                [in, size = req_message_size] secure_message_t* req_message, 
                                                size_t req_message_size, size_t max_payload_size, 
                                                [out, size=resp_message_size] secure_message_t* resp_message, 
                                                size_t resp_message_size );
        public uint32_t ecall_end_session(sgx_enclave_id_t src_enclave_id);
    };

    untrusted{
        // for untrusted supporting app
        uint32_t ocall_session_request(sgx_enclave_id_t src_enclave_id, 
                                       sgx_enclave_id_t dest_enclave_id, 
                                       [out] sgx_dh_msg1_t *dh_msg1,
                                       [out] uint32_t *session_id);
        uint32_t ocall_exchange_report(sgx_enclave_id_t src_enclave_id, 
                                       sgx_enclave_id_t dest_enclave_id, 
                                       [in] sgx_dh_msg2_t *dh_msg2, 
                                       [out] sgx_dh_msg3_t *dh_msg3, 
                                       uint32_t session_id);
        uint32_t ocall_send_request(sgx_enclave_id_t src_enclave_id, 
                                    sgx_enclave_id_t dest_enclave_id, 
                                    [in, size = req_message_size] secure_message_t* req_message, 
                                    size_t req_message_size, size_t max_payload_size, 
                                    [out, size=resp_message_size] secure_message_t* resp_message, 
                                    size_t resp_message_size) allow(ecall_generate_response);
        uint32_t ocall_end_session(sgx_enclave_id_t src_enclave_id, 
                                   sgx_enclave_id_t dest_enclave_id);

        // query enclave id of specific module
        uint32_t ocall_query_enclave_id(uint64_t target_module_id, 
                                        [out] sgx_enclave_id_t *target_enclave_id);
        void ocall_print_string([in, string] const char *str,
                                [in, string] const char *file,
                                int line);
    };
};