// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Regulator.proto

#ifndef PROTOBUF_INCLUDED_Regulator_2eproto
#define PROTOBUF_INCLUDED_Regulator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Regulator_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_Regulator_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_Regulator_2eproto();
namespace request_proto {
class Result;
class ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class TaskRequest;
class TaskRequestDefaultTypeInternal;
extern TaskRequestDefaultTypeInternal _TaskRequest_default_instance_;
class TaskResponse;
class TaskResponseDefaultTypeInternal;
extern TaskResponseDefaultTypeInternal _TaskResponse_default_instance_;
}  // namespace request_proto
namespace google {
namespace protobuf {
template<> ::request_proto::Result* Arena::CreateMaybeMessage<::request_proto::Result>(Arena*);
template<> ::request_proto::TaskRequest* Arena::CreateMaybeMessage<::request_proto::TaskRequest>(Arena*);
template<> ::request_proto::TaskResponse* Arena::CreateMaybeMessage<::request_proto::TaskResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace request_proto {

// ===================================================================

class TaskRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:request_proto.TaskRequest) */ {
 public:
  TaskRequest();
  virtual ~TaskRequest();

  TaskRequest(const TaskRequest& from);

  inline TaskRequest& operator=(const TaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskRequest(TaskRequest&& from) noexcept
    : TaskRequest() {
    *this = ::std::move(from);
  }

  inline TaskRequest& operator=(TaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskRequest* internal_default_instance() {
    return reinterpret_cast<const TaskRequest*>(
               &_TaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TaskRequest* other);
  friend void swap(TaskRequest& a, TaskRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskRequest* New() const final {
    return CreateMaybeMessage<TaskRequest>(nullptr);
  }

  TaskRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskRequest& from);
  void MergeFrom(const TaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes taskhash = 1;
  void clear_taskhash();
  static const int kTaskhashFieldNumber = 1;
  const ::std::string& taskhash() const;
  void set_taskhash(const ::std::string& value);
  #if LANG_CXX11
  void set_taskhash(::std::string&& value);
  #endif
  void set_taskhash(const char* value);
  void set_taskhash(const void* value, size_t size);
  ::std::string* mutable_taskhash();
  ::std::string* release_taskhash();
  void set_allocated_taskhash(::std::string* taskhash);

  // @@protoc_insertion_point(class_scope:request_proto.TaskRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr taskhash_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Regulator_2eproto;
};
// -------------------------------------------------------------------

class Result :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:request_proto.Result) */ {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(Result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Result* other);
  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(nullptr);
  }

  Result* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes task_result = 2;
  void clear_task_result();
  static const int kTaskResultFieldNumber = 2;
  const ::std::string& task_result() const;
  void set_task_result(const ::std::string& value);
  #if LANG_CXX11
  void set_task_result(::std::string&& value);
  #endif
  void set_task_result(const char* value);
  void set_task_result(const void* value, size_t size);
  ::std::string* mutable_task_result();
  ::std::string* release_task_result();
  void set_allocated_task_result(::std::string* task_result);

  // string error_info = 3;
  void clear_error_info();
  static const int kErrorInfoFieldNumber = 3;
  const ::std::string& error_info() const;
  void set_error_info(const ::std::string& value);
  #if LANG_CXX11
  void set_error_info(::std::string&& value);
  #endif
  void set_error_info(const char* value);
  void set_error_info(const char* value, size_t size);
  ::std::string* mutable_error_info();
  ::std::string* release_error_info();
  void set_allocated_error_info(::std::string* error_info);

  // bool status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  bool status() const;
  void set_status(bool value);

  // @@protoc_insertion_point(class_scope:request_proto.Result)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr task_result_;
  ::google::protobuf::internal::ArenaStringPtr error_info_;
  bool status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Regulator_2eproto;
};
// -------------------------------------------------------------------

class TaskResponse :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:request_proto.TaskResponse) */ {
 public:
  TaskResponse();
  virtual ~TaskResponse();

  TaskResponse(const TaskResponse& from);

  inline TaskResponse& operator=(const TaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskResponse(TaskResponse&& from) noexcept
    : TaskResponse() {
    *this = ::std::move(from);
  }

  inline TaskResponse& operator=(TaskResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskResponse* internal_default_instance() {
    return reinterpret_cast<const TaskResponse*>(
               &_TaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TaskResponse* other);
  friend void swap(TaskResponse& a, TaskResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskResponse* New() const final {
    return CreateMaybeMessage<TaskResponse>(nullptr);
  }

  TaskResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskResponse& from);
  void MergeFrom(const TaskResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes taskhash = 1;
  void clear_taskhash();
  static const int kTaskhashFieldNumber = 1;
  const ::std::string& taskhash() const;
  void set_taskhash(const ::std::string& value);
  #if LANG_CXX11
  void set_taskhash(::std::string&& value);
  #endif
  void set_taskhash(const char* value);
  void set_taskhash(const void* value, size_t size);
  ::std::string* mutable_taskhash();
  ::std::string* release_taskhash();
  void set_allocated_taskhash(::std::string* taskhash);

  // bytes rule_file_hash = 3;
  void clear_rule_file_hash();
  static const int kRuleFileHashFieldNumber = 3;
  const ::std::string& rule_file_hash() const;
  void set_rule_file_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_rule_file_hash(::std::string&& value);
  #endif
  void set_rule_file_hash(const char* value);
  void set_rule_file_hash(const void* value, size_t size);
  ::std::string* mutable_rule_file_hash();
  ::std::string* release_rule_file_hash();
  void set_allocated_rule_file_hash(::std::string* rule_file_hash);

  // bytes signature = 4;
  void clear_signature();
  static const int kSignatureFieldNumber = 4;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // .request_proto.Result result = 2;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 2;
  const ::request_proto::Result& result() const;
  ::request_proto::Result* release_result();
  ::request_proto::Result* mutable_result();
  void set_allocated_result(::request_proto::Result* result);

  // @@protoc_insertion_point(class_scope:request_proto.TaskResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr taskhash_;
  ::google::protobuf::internal::ArenaStringPtr rule_file_hash_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::request_proto::Result* result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Regulator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskRequest

// bytes taskhash = 1;
inline void TaskRequest::clear_taskhash() {
  taskhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskRequest::taskhash() const {
  // @@protoc_insertion_point(field_get:request_proto.TaskRequest.taskhash)
  return taskhash_.GetNoArena();
}
inline void TaskRequest::set_taskhash(const ::std::string& value) {
  
  taskhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:request_proto.TaskRequest.taskhash)
}
#if LANG_CXX11
inline void TaskRequest::set_taskhash(::std::string&& value) {
  
  taskhash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_proto.TaskRequest.taskhash)
}
#endif
inline void TaskRequest::set_taskhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_proto.TaskRequest.taskhash)
}
inline void TaskRequest::set_taskhash(const void* value, size_t size) {
  
  taskhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_proto.TaskRequest.taskhash)
}
inline ::std::string* TaskRequest::mutable_taskhash() {
  
  // @@protoc_insertion_point(field_mutable:request_proto.TaskRequest.taskhash)
  return taskhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskRequest::release_taskhash() {
  // @@protoc_insertion_point(field_release:request_proto.TaskRequest.taskhash)
  
  return taskhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskRequest::set_allocated_taskhash(::std::string* taskhash) {
  if (taskhash != nullptr) {
    
  } else {
    
  }
  taskhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taskhash);
  // @@protoc_insertion_point(field_set_allocated:request_proto.TaskRequest.taskhash)
}

// -------------------------------------------------------------------

// Result

// bool status = 1;
inline void Result::clear_status() {
  status_ = false;
}
inline bool Result::status() const {
  // @@protoc_insertion_point(field_get:request_proto.Result.status)
  return status_;
}
inline void Result::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:request_proto.Result.status)
}

// bytes task_result = 2;
inline void Result::clear_task_result() {
  task_result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Result::task_result() const {
  // @@protoc_insertion_point(field_get:request_proto.Result.task_result)
  return task_result_.GetNoArena();
}
inline void Result::set_task_result(const ::std::string& value) {
  
  task_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:request_proto.Result.task_result)
}
#if LANG_CXX11
inline void Result::set_task_result(::std::string&& value) {
  
  task_result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Result.task_result)
}
#endif
inline void Result::set_task_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_proto.Result.task_result)
}
inline void Result::set_task_result(const void* value, size_t size) {
  
  task_result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_proto.Result.task_result)
}
inline ::std::string* Result::mutable_task_result() {
  
  // @@protoc_insertion_point(field_mutable:request_proto.Result.task_result)
  return task_result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Result::release_task_result() {
  // @@protoc_insertion_point(field_release:request_proto.Result.task_result)
  
  return task_result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_allocated_task_result(::std::string* task_result) {
  if (task_result != nullptr) {
    
  } else {
    
  }
  task_result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_result);
  // @@protoc_insertion_point(field_set_allocated:request_proto.Result.task_result)
}

// string error_info = 3;
inline void Result::clear_error_info() {
  error_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Result::error_info() const {
  // @@protoc_insertion_point(field_get:request_proto.Result.error_info)
  return error_info_.GetNoArena();
}
inline void Result::set_error_info(const ::std::string& value) {
  
  error_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:request_proto.Result.error_info)
}
#if LANG_CXX11
inline void Result::set_error_info(::std::string&& value) {
  
  error_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_proto.Result.error_info)
}
#endif
inline void Result::set_error_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_proto.Result.error_info)
}
inline void Result::set_error_info(const char* value, size_t size) {
  
  error_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_proto.Result.error_info)
}
inline ::std::string* Result::mutable_error_info() {
  
  // @@protoc_insertion_point(field_mutable:request_proto.Result.error_info)
  return error_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Result::release_error_info() {
  // @@protoc_insertion_point(field_release:request_proto.Result.error_info)
  
  return error_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_allocated_error_info(::std::string* error_info) {
  if (error_info != nullptr) {
    
  } else {
    
  }
  error_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_info);
  // @@protoc_insertion_point(field_set_allocated:request_proto.Result.error_info)
}

// -------------------------------------------------------------------

// TaskResponse

// bytes taskhash = 1;
inline void TaskResponse::clear_taskhash() {
  taskhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskResponse::taskhash() const {
  // @@protoc_insertion_point(field_get:request_proto.TaskResponse.taskhash)
  return taskhash_.GetNoArena();
}
inline void TaskResponse::set_taskhash(const ::std::string& value) {
  
  taskhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:request_proto.TaskResponse.taskhash)
}
#if LANG_CXX11
inline void TaskResponse::set_taskhash(::std::string&& value) {
  
  taskhash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_proto.TaskResponse.taskhash)
}
#endif
inline void TaskResponse::set_taskhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_proto.TaskResponse.taskhash)
}
inline void TaskResponse::set_taskhash(const void* value, size_t size) {
  
  taskhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_proto.TaskResponse.taskhash)
}
inline ::std::string* TaskResponse::mutable_taskhash() {
  
  // @@protoc_insertion_point(field_mutable:request_proto.TaskResponse.taskhash)
  return taskhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskResponse::release_taskhash() {
  // @@protoc_insertion_point(field_release:request_proto.TaskResponse.taskhash)
  
  return taskhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskResponse::set_allocated_taskhash(::std::string* taskhash) {
  if (taskhash != nullptr) {
    
  } else {
    
  }
  taskhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taskhash);
  // @@protoc_insertion_point(field_set_allocated:request_proto.TaskResponse.taskhash)
}

// .request_proto.Result result = 2;
inline bool TaskResponse::has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline void TaskResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::request_proto::Result& TaskResponse::result() const {
  const ::request_proto::Result* p = result_;
  // @@protoc_insertion_point(field_get:request_proto.TaskResponse.result)
  return p != nullptr ? *p : *reinterpret_cast<const ::request_proto::Result*>(
      &::request_proto::_Result_default_instance_);
}
inline ::request_proto::Result* TaskResponse::release_result() {
  // @@protoc_insertion_point(field_release:request_proto.TaskResponse.result)
  
  ::request_proto::Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::request_proto::Result* TaskResponse::mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::request_proto::Result>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:request_proto.TaskResponse.result)
  return result_;
}
inline void TaskResponse::set_allocated_result(::request_proto::Result* result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:request_proto.TaskResponse.result)
}

// bytes rule_file_hash = 3;
inline void TaskResponse::clear_rule_file_hash() {
  rule_file_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskResponse::rule_file_hash() const {
  // @@protoc_insertion_point(field_get:request_proto.TaskResponse.rule_file_hash)
  return rule_file_hash_.GetNoArena();
}
inline void TaskResponse::set_rule_file_hash(const ::std::string& value) {
  
  rule_file_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:request_proto.TaskResponse.rule_file_hash)
}
#if LANG_CXX11
inline void TaskResponse::set_rule_file_hash(::std::string&& value) {
  
  rule_file_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_proto.TaskResponse.rule_file_hash)
}
#endif
inline void TaskResponse::set_rule_file_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rule_file_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_proto.TaskResponse.rule_file_hash)
}
inline void TaskResponse::set_rule_file_hash(const void* value, size_t size) {
  
  rule_file_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_proto.TaskResponse.rule_file_hash)
}
inline ::std::string* TaskResponse::mutable_rule_file_hash() {
  
  // @@protoc_insertion_point(field_mutable:request_proto.TaskResponse.rule_file_hash)
  return rule_file_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskResponse::release_rule_file_hash() {
  // @@protoc_insertion_point(field_release:request_proto.TaskResponse.rule_file_hash)
  
  return rule_file_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskResponse::set_allocated_rule_file_hash(::std::string* rule_file_hash) {
  if (rule_file_hash != nullptr) {
    
  } else {
    
  }
  rule_file_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rule_file_hash);
  // @@protoc_insertion_point(field_set_allocated:request_proto.TaskResponse.rule_file_hash)
}

// bytes signature = 4;
inline void TaskResponse::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskResponse::signature() const {
  // @@protoc_insertion_point(field_get:request_proto.TaskResponse.signature)
  return signature_.GetNoArena();
}
inline void TaskResponse::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:request_proto.TaskResponse.signature)
}
#if LANG_CXX11
inline void TaskResponse::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_proto.TaskResponse.signature)
}
#endif
inline void TaskResponse::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_proto.TaskResponse.signature)
}
inline void TaskResponse::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_proto.TaskResponse.signature)
}
inline ::std::string* TaskResponse::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:request_proto.TaskResponse.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskResponse::release_signature() {
  // @@protoc_insertion_point(field_release:request_proto.TaskResponse.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskResponse::set_allocated_signature(::std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:request_proto.TaskResponse.signature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace request_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_Regulator_2eproto
