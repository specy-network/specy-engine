// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E2EMessage.proto

#include "E2EMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_RuleCheck_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RuleCheckRequest_RuleCheck_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_RuleCheck_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RuleCheckResponse_RuleCheck_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Signature_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SignInput_Signature_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Signature_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SignOutput_Signature_2eproto;
namespace e2e_message {
class E2ERequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<E2ERequest> _instance;
  const ::e2e_message::RuleCheckRequest* rule_check_input_;
  const ::e2e_message::SignInput* sign_input_;
} _E2ERequest_default_instance_;
class E2EResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<E2EResponse> _instance;
  const ::e2e_message::RuleCheckResponse* rule_check_output_;
  const ::e2e_message::SignOutput* sign_output_;
} _E2EResponse_default_instance_;
}  // namespace e2e_message
static void InitDefaultsE2ERequest_E2EMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::e2e_message::_E2ERequest_default_instance_;
    new (ptr) ::e2e_message::E2ERequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::e2e_message::E2ERequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_E2ERequest_E2EMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsE2ERequest_E2EMessage_2eproto}, {
      &scc_info_RuleCheckRequest_RuleCheck_2eproto.base,
      &scc_info_SignInput_Signature_2eproto.base,}};

static void InitDefaultsE2EResponse_E2EMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::e2e_message::_E2EResponse_default_instance_;
    new (ptr) ::e2e_message::E2EResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::e2e_message::E2EResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_E2EResponse_E2EMessage_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsE2EResponse_E2EMessage_2eproto}, {
      &scc_info_RuleCheckResponse_RuleCheck_2eproto.base,
      &scc_info_SignOutput_Signature_2eproto.base,}};

void InitDefaults_E2EMessage_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_E2ERequest_E2EMessage_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_E2EResponse_E2EMessage_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_E2EMessage_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_E2EMessage_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_E2EMessage_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_E2EMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::e2e_message::E2ERequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::e2e_message::E2ERequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::e2e_message::E2ERequest, func_id_),
  offsetof(::e2e_message::E2ERequestDefaultTypeInternal, rule_check_input_),
  offsetof(::e2e_message::E2ERequestDefaultTypeInternal, sign_input_),
  PROTOBUF_FIELD_OFFSET(::e2e_message::E2ERequest, input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::e2e_message::E2EResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::e2e_message::E2EResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::e2e_message::E2EResponseDefaultTypeInternal, rule_check_output_),
  offsetof(::e2e_message::E2EResponseDefaultTypeInternal, sign_output_),
  PROTOBUF_FIELD_OFFSET(::e2e_message::E2EResponse, output_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::e2e_message::E2ERequest)},
  { 9, -1, sizeof(::e2e_message::E2EResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::e2e_message::_E2ERequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::e2e_message::_E2EResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_E2EMessage_2eproto = {
  {}, AddDescriptors_E2EMessage_2eproto, "E2EMessage.proto", schemas,
  file_default_instances, TableStruct_E2EMessage_2eproto::offsets,
  file_level_metadata_E2EMessage_2eproto, 2, file_level_enum_descriptors_E2EMessage_2eproto, file_level_service_descriptors_E2EMessage_2eproto,
};

const char descriptor_table_protodef_E2EMessage_2eproto[] =
  "\n\020E2EMessage.proto\022\013e2e_message\032\017Signatu"
  "re.proto\032\017RuleCheck.proto\"\217\001\n\nE2ERequest"
  "\022\017\n\007func_id\030\001 \001(\004\0229\n\020rule_check_input\030\002 "
  "\001(\0132\035.e2e_message.RuleCheckRequestH\000\022,\n\n"
  "sign_input\030\003 \001(\0132\026.e2e_message.SignInput"
  "H\000B\007\n\005input\"\204\001\n\013E2EResponse\022;\n\021rule_chec"
  "k_output\030\001 \001(\0132\036.e2e_message.RuleCheckRe"
  "sponseH\000\022.\n\013sign_output\030\002 \001(\0132\027.e2e_mess"
  "age.SignOutputH\000B\010\n\006outputb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_E2EMessage_2eproto = {
  false, InitDefaults_E2EMessage_2eproto, 
  descriptor_table_protodef_E2EMessage_2eproto,
  "E2EMessage.proto", &assign_descriptors_table_E2EMessage_2eproto, 354,
};

void AddDescriptors_E2EMessage_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_Signature_2eproto,
    ::AddDescriptors_RuleCheck_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_E2EMessage_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_E2EMessage_2eproto = []() { AddDescriptors_E2EMessage_2eproto(); return true; }();
namespace e2e_message {

// ===================================================================

void E2ERequest::InitAsDefaultInstance() {
  ::e2e_message::_E2ERequest_default_instance_.rule_check_input_ = const_cast< ::e2e_message::RuleCheckRequest*>(
      ::e2e_message::RuleCheckRequest::internal_default_instance());
  ::e2e_message::_E2ERequest_default_instance_.sign_input_ = const_cast< ::e2e_message::SignInput*>(
      ::e2e_message::SignInput::internal_default_instance());
}
class E2ERequest::HasBitSetters {
 public:
  static const ::e2e_message::RuleCheckRequest& rule_check_input(const E2ERequest* msg);
  static const ::e2e_message::SignInput& sign_input(const E2ERequest* msg);
};

const ::e2e_message::RuleCheckRequest&
E2ERequest::HasBitSetters::rule_check_input(const E2ERequest* msg) {
  return *msg->input_.rule_check_input_;
}
const ::e2e_message::SignInput&
E2ERequest::HasBitSetters::sign_input(const E2ERequest* msg) {
  return *msg->input_.sign_input_;
}
void E2ERequest::set_allocated_rule_check_input(::e2e_message::RuleCheckRequest* rule_check_input) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_input();
  if (rule_check_input) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rule_check_input = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rule_check_input, submessage_arena);
    }
    set_has_rule_check_input();
    input_.rule_check_input_ = rule_check_input;
  }
  // @@protoc_insertion_point(field_set_allocated:e2e_message.E2ERequest.rule_check_input)
}
void E2ERequest::clear_rule_check_input() {
  if (has_rule_check_input()) {
    delete input_.rule_check_input_;
    clear_has_input();
  }
}
void E2ERequest::set_allocated_sign_input(::e2e_message::SignInput* sign_input) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_input();
  if (sign_input) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sign_input = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sign_input, submessage_arena);
    }
    set_has_sign_input();
    input_.sign_input_ = sign_input;
  }
  // @@protoc_insertion_point(field_set_allocated:e2e_message.E2ERequest.sign_input)
}
void E2ERequest::clear_sign_input() {
  if (has_sign_input()) {
    delete input_.sign_input_;
    clear_has_input();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int E2ERequest::kFuncIdFieldNumber;
const int E2ERequest::kRuleCheckInputFieldNumber;
const int E2ERequest::kSignInputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

E2ERequest::E2ERequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:e2e_message.E2ERequest)
}
E2ERequest::E2ERequest(const E2ERequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  func_id_ = from.func_id_;
  clear_has_input();
  switch (from.input_case()) {
    case kRuleCheckInput: {
      mutable_rule_check_input()->::e2e_message::RuleCheckRequest::MergeFrom(from.rule_check_input());
      break;
    }
    case kSignInput: {
      mutable_sign_input()->::e2e_message::SignInput::MergeFrom(from.sign_input());
      break;
    }
    case INPUT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:e2e_message.E2ERequest)
}

void E2ERequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_E2ERequest_E2EMessage_2eproto.base);
  func_id_ = PROTOBUF_ULONGLONG(0);
  clear_has_input();
}

E2ERequest::~E2ERequest() {
  // @@protoc_insertion_point(destructor:e2e_message.E2ERequest)
  SharedDtor();
}

void E2ERequest::SharedDtor() {
  if (has_input()) {
    clear_input();
  }
}

void E2ERequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const E2ERequest& E2ERequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_E2ERequest_E2EMessage_2eproto.base);
  return *internal_default_instance();
}


void E2ERequest::clear_input() {
// @@protoc_insertion_point(one_of_clear_start:e2e_message.E2ERequest)
  switch (input_case()) {
    case kRuleCheckInput: {
      delete input_.rule_check_input_;
      break;
    }
    case kSignInput: {
      delete input_.sign_input_;
      break;
    }
    case INPUT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INPUT_NOT_SET;
}


void E2ERequest::Clear() {
// @@protoc_insertion_point(message_clear_start:e2e_message.E2ERequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  func_id_ = PROTOBUF_ULONGLONG(0);
  clear_input();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* E2ERequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<E2ERequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 func_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_func_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .e2e_message.RuleCheckRequest rule_check_input = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::e2e_message::RuleCheckRequest::_InternalParse;
        object = msg->mutable_rule_check_input();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .e2e_message.SignInput sign_input = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::e2e_message::SignInput::_InternalParse;
        object = msg->mutable_sign_input();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool E2ERequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:e2e_message.E2ERequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 func_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &func_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .e2e_message.RuleCheckRequest rule_check_input = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rule_check_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .e2e_message.SignInput sign_input = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sign_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:e2e_message.E2ERequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:e2e_message.E2ERequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void E2ERequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:e2e_message.E2ERequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 func_id = 1;
  if (this->func_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->func_id(), output);
  }

  // .e2e_message.RuleCheckRequest rule_check_input = 2;
  if (has_rule_check_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::rule_check_input(this), output);
  }

  // .e2e_message.SignInput sign_input = 3;
  if (has_sign_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::sign_input(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:e2e_message.E2ERequest)
}

::google::protobuf::uint8* E2ERequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:e2e_message.E2ERequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 func_id = 1;
  if (this->func_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->func_id(), target);
  }

  // .e2e_message.RuleCheckRequest rule_check_input = 2;
  if (has_rule_check_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::rule_check_input(this), target);
  }

  // .e2e_message.SignInput sign_input = 3;
  if (has_sign_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::sign_input(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:e2e_message.E2ERequest)
  return target;
}

size_t E2ERequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:e2e_message.E2ERequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 func_id = 1;
  if (this->func_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->func_id());
  }

  switch (input_case()) {
    // .e2e_message.RuleCheckRequest rule_check_input = 2;
    case kRuleCheckInput: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *input_.rule_check_input_);
      break;
    }
    // .e2e_message.SignInput sign_input = 3;
    case kSignInput: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *input_.sign_input_);
      break;
    }
    case INPUT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void E2ERequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:e2e_message.E2ERequest)
  GOOGLE_DCHECK_NE(&from, this);
  const E2ERequest* source =
      ::google::protobuf::DynamicCastToGenerated<E2ERequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:e2e_message.E2ERequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:e2e_message.E2ERequest)
    MergeFrom(*source);
  }
}

void E2ERequest::MergeFrom(const E2ERequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:e2e_message.E2ERequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.func_id() != 0) {
    set_func_id(from.func_id());
  }
  switch (from.input_case()) {
    case kRuleCheckInput: {
      mutable_rule_check_input()->::e2e_message::RuleCheckRequest::MergeFrom(from.rule_check_input());
      break;
    }
    case kSignInput: {
      mutable_sign_input()->::e2e_message::SignInput::MergeFrom(from.sign_input());
      break;
    }
    case INPUT_NOT_SET: {
      break;
    }
  }
}

void E2ERequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:e2e_message.E2ERequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E2ERequest::CopyFrom(const E2ERequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:e2e_message.E2ERequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E2ERequest::IsInitialized() const {
  return true;
}

void E2ERequest::Swap(E2ERequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void E2ERequest::InternalSwap(E2ERequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(func_id_, other->func_id_);
  swap(input_, other->input_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata E2ERequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_E2EMessage_2eproto);
  return ::file_level_metadata_E2EMessage_2eproto[kIndexInFileMessages];
}


// ===================================================================

void E2EResponse::InitAsDefaultInstance() {
  ::e2e_message::_E2EResponse_default_instance_.rule_check_output_ = const_cast< ::e2e_message::RuleCheckResponse*>(
      ::e2e_message::RuleCheckResponse::internal_default_instance());
  ::e2e_message::_E2EResponse_default_instance_.sign_output_ = const_cast< ::e2e_message::SignOutput*>(
      ::e2e_message::SignOutput::internal_default_instance());
}
class E2EResponse::HasBitSetters {
 public:
  static const ::e2e_message::RuleCheckResponse& rule_check_output(const E2EResponse* msg);
  static const ::e2e_message::SignOutput& sign_output(const E2EResponse* msg);
};

const ::e2e_message::RuleCheckResponse&
E2EResponse::HasBitSetters::rule_check_output(const E2EResponse* msg) {
  return *msg->output_.rule_check_output_;
}
const ::e2e_message::SignOutput&
E2EResponse::HasBitSetters::sign_output(const E2EResponse* msg) {
  return *msg->output_.sign_output_;
}
void E2EResponse::set_allocated_rule_check_output(::e2e_message::RuleCheckResponse* rule_check_output) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_output();
  if (rule_check_output) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rule_check_output = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rule_check_output, submessage_arena);
    }
    set_has_rule_check_output();
    output_.rule_check_output_ = rule_check_output;
  }
  // @@protoc_insertion_point(field_set_allocated:e2e_message.E2EResponse.rule_check_output)
}
void E2EResponse::clear_rule_check_output() {
  if (has_rule_check_output()) {
    delete output_.rule_check_output_;
    clear_has_output();
  }
}
void E2EResponse::set_allocated_sign_output(::e2e_message::SignOutput* sign_output) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_output();
  if (sign_output) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sign_output = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sign_output, submessage_arena);
    }
    set_has_sign_output();
    output_.sign_output_ = sign_output;
  }
  // @@protoc_insertion_point(field_set_allocated:e2e_message.E2EResponse.sign_output)
}
void E2EResponse::clear_sign_output() {
  if (has_sign_output()) {
    delete output_.sign_output_;
    clear_has_output();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int E2EResponse::kRuleCheckOutputFieldNumber;
const int E2EResponse::kSignOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

E2EResponse::E2EResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:e2e_message.E2EResponse)
}
E2EResponse::E2EResponse(const E2EResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_output();
  switch (from.output_case()) {
    case kRuleCheckOutput: {
      mutable_rule_check_output()->::e2e_message::RuleCheckResponse::MergeFrom(from.rule_check_output());
      break;
    }
    case kSignOutput: {
      mutable_sign_output()->::e2e_message::SignOutput::MergeFrom(from.sign_output());
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:e2e_message.E2EResponse)
}

void E2EResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_E2EResponse_E2EMessage_2eproto.base);
  clear_has_output();
}

E2EResponse::~E2EResponse() {
  // @@protoc_insertion_point(destructor:e2e_message.E2EResponse)
  SharedDtor();
}

void E2EResponse::SharedDtor() {
  if (has_output()) {
    clear_output();
  }
}

void E2EResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const E2EResponse& E2EResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_E2EResponse_E2EMessage_2eproto.base);
  return *internal_default_instance();
}


void E2EResponse::clear_output() {
// @@protoc_insertion_point(one_of_clear_start:e2e_message.E2EResponse)
  switch (output_case()) {
    case kRuleCheckOutput: {
      delete output_.rule_check_output_;
      break;
    }
    case kSignOutput: {
      delete output_.sign_output_;
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OUTPUT_NOT_SET;
}


void E2EResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:e2e_message.E2EResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_output();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* E2EResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<E2EResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .e2e_message.RuleCheckResponse rule_check_output = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::e2e_message::RuleCheckResponse::_InternalParse;
        object = msg->mutable_rule_check_output();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .e2e_message.SignOutput sign_output = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::e2e_message::SignOutput::_InternalParse;
        object = msg->mutable_sign_output();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool E2EResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:e2e_message.E2EResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .e2e_message.RuleCheckResponse rule_check_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rule_check_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .e2e_message.SignOutput sign_output = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sign_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:e2e_message.E2EResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:e2e_message.E2EResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void E2EResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:e2e_message.E2EResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .e2e_message.RuleCheckResponse rule_check_output = 1;
  if (has_rule_check_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::rule_check_output(this), output);
  }

  // .e2e_message.SignOutput sign_output = 2;
  if (has_sign_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::sign_output(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:e2e_message.E2EResponse)
}

::google::protobuf::uint8* E2EResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:e2e_message.E2EResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .e2e_message.RuleCheckResponse rule_check_output = 1;
  if (has_rule_check_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::rule_check_output(this), target);
  }

  // .e2e_message.SignOutput sign_output = 2;
  if (has_sign_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::sign_output(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:e2e_message.E2EResponse)
  return target;
}

size_t E2EResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:e2e_message.E2EResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (output_case()) {
    // .e2e_message.RuleCheckResponse rule_check_output = 1;
    case kRuleCheckOutput: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *output_.rule_check_output_);
      break;
    }
    // .e2e_message.SignOutput sign_output = 2;
    case kSignOutput: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *output_.sign_output_);
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void E2EResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:e2e_message.E2EResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const E2EResponse* source =
      ::google::protobuf::DynamicCastToGenerated<E2EResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:e2e_message.E2EResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:e2e_message.E2EResponse)
    MergeFrom(*source);
  }
}

void E2EResponse::MergeFrom(const E2EResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:e2e_message.E2EResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.output_case()) {
    case kRuleCheckOutput: {
      mutable_rule_check_output()->::e2e_message::RuleCheckResponse::MergeFrom(from.rule_check_output());
      break;
    }
    case kSignOutput: {
      mutable_sign_output()->::e2e_message::SignOutput::MergeFrom(from.sign_output());
      break;
    }
    case OUTPUT_NOT_SET: {
      break;
    }
  }
}

void E2EResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:e2e_message.E2EResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E2EResponse::CopyFrom(const E2EResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:e2e_message.E2EResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E2EResponse::IsInitialized() const {
  return true;
}

void E2EResponse::Swap(E2EResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void E2EResponse::InternalSwap(E2EResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(output_, other->output_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata E2EResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_E2EMessage_2eproto);
  return ::file_level_metadata_E2EMessage_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace e2e_message
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::e2e_message::E2ERequest* Arena::CreateMaybeMessage< ::e2e_message::E2ERequest >(Arena* arena) {
  return Arena::CreateInternal< ::e2e_message::E2ERequest >(arena);
}
template<> PROTOBUF_NOINLINE ::e2e_message::E2EResponse* Arena::CreateMaybeMessage< ::e2e_message::E2EResponse >(Arena* arena) {
  return Arena::CreateInternal< ::e2e_message::E2EResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
