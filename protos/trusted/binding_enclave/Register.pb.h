// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Register.proto

#ifndef PROTOBUF_INCLUDED_Register_2eproto
#define PROTOBUF_INCLUDED_Register_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Register_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_Register_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_Register_2eproto();
namespace request_proto {
class EngineInfoRequest;
class EngineInfoRequestDefaultTypeInternal;
extern EngineInfoRequestDefaultTypeInternal _EngineInfoRequest_default_instance_;
class EngineInfoResponse;
class EngineInfoResponseDefaultTypeInternal;
extern EngineInfoResponseDefaultTypeInternal _EngineInfoResponse_default_instance_;
}  // namespace request_proto
namespace google {
namespace protobuf {
template<> ::request_proto::EngineInfoRequest* Arena::CreateMaybeMessage<::request_proto::EngineInfoRequest>(Arena*);
template<> ::request_proto::EngineInfoResponse* Arena::CreateMaybeMessage<::request_proto::EngineInfoResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace request_proto {

// ===================================================================

class EngineInfoRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:request_proto.EngineInfoRequest) */ {
 public:
  EngineInfoRequest();
  virtual ~EngineInfoRequest();

  EngineInfoRequest(const EngineInfoRequest& from);

  inline EngineInfoRequest& operator=(const EngineInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EngineInfoRequest(EngineInfoRequest&& from) noexcept
    : EngineInfoRequest() {
    *this = ::std::move(from);
  }

  inline EngineInfoRequest& operator=(EngineInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EngineInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EngineInfoRequest* internal_default_instance() {
    return reinterpret_cast<const EngineInfoRequest*>(
               &_EngineInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EngineInfoRequest* other);
  friend void swap(EngineInfoRequest& a, EngineInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EngineInfoRequest* New() const final {
    return CreateMaybeMessage<EngineInfoRequest>(nullptr);
  }

  EngineInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EngineInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EngineInfoRequest& from);
  void MergeFrom(const EngineInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ChainType = 1;
  void clear_chaintype();
  static const int kChainTypeFieldNumber = 1;
  const ::std::string& chaintype() const;
  void set_chaintype(const ::std::string& value);
  #if LANG_CXX11
  void set_chaintype(::std::string&& value);
  #endif
  void set_chaintype(const char* value);
  void set_chaintype(const char* value, size_t size);
  ::std::string* mutable_chaintype();
  ::std::string* release_chaintype();
  void set_allocated_chaintype(::std::string* chaintype);

  // string ChainId = 2;
  void clear_chainid();
  static const int kChainIdFieldNumber = 2;
  const ::std::string& chainid() const;
  void set_chainid(const ::std::string& value);
  #if LANG_CXX11
  void set_chainid(::std::string&& value);
  #endif
  void set_chainid(const char* value);
  void set_chainid(const char* value, size_t size);
  ::std::string* mutable_chainid();
  ::std::string* release_chainid();
  void set_allocated_chainid(::std::string* chainid);

  // @@protoc_insertion_point(class_scope:request_proto.EngineInfoRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr chaintype_;
  ::google::protobuf::internal::ArenaStringPtr chainid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Register_2eproto;
};
// -------------------------------------------------------------------

class EngineInfoResponse :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:request_proto.EngineInfoResponse) */ {
 public:
  EngineInfoResponse();
  virtual ~EngineInfoResponse();

  EngineInfoResponse(const EngineInfoResponse& from);

  inline EngineInfoResponse& operator=(const EngineInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EngineInfoResponse(EngineInfoResponse&& from) noexcept
    : EngineInfoResponse() {
    *this = ::std::move(from);
  }

  inline EngineInfoResponse& operator=(EngineInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EngineInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EngineInfoResponse* internal_default_instance() {
    return reinterpret_cast<const EngineInfoResponse*>(
               &_EngineInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(EngineInfoResponse* other);
  friend void swap(EngineInfoResponse& a, EngineInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EngineInfoResponse* New() const final {
    return CreateMaybeMessage<EngineInfoResponse>(nullptr);
  }

  EngineInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EngineInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EngineInfoResponse& from);
  void MergeFrom(const EngineInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EngineInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ias_attestation_report = 1;
  void clear_ias_attestation_report();
  static const int kIasAttestationReportFieldNumber = 1;
  const ::std::string& ias_attestation_report() const;
  void set_ias_attestation_report(const ::std::string& value);
  #if LANG_CXX11
  void set_ias_attestation_report(::std::string&& value);
  #endif
  void set_ias_attestation_report(const char* value);
  void set_ias_attestation_report(const char* value, size_t size);
  ::std::string* mutable_ias_attestation_report();
  ::std::string* release_ias_attestation_report();
  void set_allocated_ias_attestation_report(::std::string* ias_attestation_report);

  // string enclave_pk = 2;
  void clear_enclave_pk();
  static const int kEnclavePkFieldNumber = 2;
  const ::std::string& enclave_pk() const;
  void set_enclave_pk(const ::std::string& value);
  #if LANG_CXX11
  void set_enclave_pk(::std::string&& value);
  #endif
  void set_enclave_pk(const char* value);
  void set_enclave_pk(const char* value, size_t size);
  ::std::string* mutable_enclave_pk();
  ::std::string* release_enclave_pk();
  void set_allocated_enclave_pk(::std::string* enclave_pk);

  // string error_info = 3;
  void clear_error_info();
  static const int kErrorInfoFieldNumber = 3;
  const ::std::string& error_info() const;
  void set_error_info(const ::std::string& value);
  #if LANG_CXX11
  void set_error_info(::std::string&& value);
  #endif
  void set_error_info(const char* value);
  void set_error_info(const char* value, size_t size);
  ::std::string* mutable_error_info();
  ::std::string* release_error_info();
  void set_allocated_error_info(::std::string* error_info);

  // @@protoc_insertion_point(class_scope:request_proto.EngineInfoResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ias_attestation_report_;
  ::google::protobuf::internal::ArenaStringPtr enclave_pk_;
  ::google::protobuf::internal::ArenaStringPtr error_info_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Register_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EngineInfoRequest

// string ChainType = 1;
inline void EngineInfoRequest::clear_chaintype() {
  chaintype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EngineInfoRequest::chaintype() const {
  // @@protoc_insertion_point(field_get:request_proto.EngineInfoRequest.ChainType)
  return chaintype_.GetNoArena();
}
inline void EngineInfoRequest::set_chaintype(const ::std::string& value) {
  
  chaintype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:request_proto.EngineInfoRequest.ChainType)
}
#if LANG_CXX11
inline void EngineInfoRequest::set_chaintype(::std::string&& value) {
  
  chaintype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_proto.EngineInfoRequest.ChainType)
}
#endif
inline void EngineInfoRequest::set_chaintype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chaintype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_proto.EngineInfoRequest.ChainType)
}
inline void EngineInfoRequest::set_chaintype(const char* value, size_t size) {
  
  chaintype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_proto.EngineInfoRequest.ChainType)
}
inline ::std::string* EngineInfoRequest::mutable_chaintype() {
  
  // @@protoc_insertion_point(field_mutable:request_proto.EngineInfoRequest.ChainType)
  return chaintype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EngineInfoRequest::release_chaintype() {
  // @@protoc_insertion_point(field_release:request_proto.EngineInfoRequest.ChainType)
  
  return chaintype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EngineInfoRequest::set_allocated_chaintype(::std::string* chaintype) {
  if (chaintype != nullptr) {
    
  } else {
    
  }
  chaintype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chaintype);
  // @@protoc_insertion_point(field_set_allocated:request_proto.EngineInfoRequest.ChainType)
}

// string ChainId = 2;
inline void EngineInfoRequest::clear_chainid() {
  chainid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EngineInfoRequest::chainid() const {
  // @@protoc_insertion_point(field_get:request_proto.EngineInfoRequest.ChainId)
  return chainid_.GetNoArena();
}
inline void EngineInfoRequest::set_chainid(const ::std::string& value) {
  
  chainid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:request_proto.EngineInfoRequest.ChainId)
}
#if LANG_CXX11
inline void EngineInfoRequest::set_chainid(::std::string&& value) {
  
  chainid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_proto.EngineInfoRequest.ChainId)
}
#endif
inline void EngineInfoRequest::set_chainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chainid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_proto.EngineInfoRequest.ChainId)
}
inline void EngineInfoRequest::set_chainid(const char* value, size_t size) {
  
  chainid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_proto.EngineInfoRequest.ChainId)
}
inline ::std::string* EngineInfoRequest::mutable_chainid() {
  
  // @@protoc_insertion_point(field_mutable:request_proto.EngineInfoRequest.ChainId)
  return chainid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EngineInfoRequest::release_chainid() {
  // @@protoc_insertion_point(field_release:request_proto.EngineInfoRequest.ChainId)
  
  return chainid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EngineInfoRequest::set_allocated_chainid(::std::string* chainid) {
  if (chainid != nullptr) {
    
  } else {
    
  }
  chainid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chainid);
  // @@protoc_insertion_point(field_set_allocated:request_proto.EngineInfoRequest.ChainId)
}

// -------------------------------------------------------------------

// EngineInfoResponse

// string ias_attestation_report = 1;
inline void EngineInfoResponse::clear_ias_attestation_report() {
  ias_attestation_report_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EngineInfoResponse::ias_attestation_report() const {
  // @@protoc_insertion_point(field_get:request_proto.EngineInfoResponse.ias_attestation_report)
  return ias_attestation_report_.GetNoArena();
}
inline void EngineInfoResponse::set_ias_attestation_report(const ::std::string& value) {
  
  ias_attestation_report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:request_proto.EngineInfoResponse.ias_attestation_report)
}
#if LANG_CXX11
inline void EngineInfoResponse::set_ias_attestation_report(::std::string&& value) {
  
  ias_attestation_report_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_proto.EngineInfoResponse.ias_attestation_report)
}
#endif
inline void EngineInfoResponse::set_ias_attestation_report(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ias_attestation_report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_proto.EngineInfoResponse.ias_attestation_report)
}
inline void EngineInfoResponse::set_ias_attestation_report(const char* value, size_t size) {
  
  ias_attestation_report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_proto.EngineInfoResponse.ias_attestation_report)
}
inline ::std::string* EngineInfoResponse::mutable_ias_attestation_report() {
  
  // @@protoc_insertion_point(field_mutable:request_proto.EngineInfoResponse.ias_attestation_report)
  return ias_attestation_report_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EngineInfoResponse::release_ias_attestation_report() {
  // @@protoc_insertion_point(field_release:request_proto.EngineInfoResponse.ias_attestation_report)
  
  return ias_attestation_report_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EngineInfoResponse::set_allocated_ias_attestation_report(::std::string* ias_attestation_report) {
  if (ias_attestation_report != nullptr) {
    
  } else {
    
  }
  ias_attestation_report_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ias_attestation_report);
  // @@protoc_insertion_point(field_set_allocated:request_proto.EngineInfoResponse.ias_attestation_report)
}

// string enclave_pk = 2;
inline void EngineInfoResponse::clear_enclave_pk() {
  enclave_pk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EngineInfoResponse::enclave_pk() const {
  // @@protoc_insertion_point(field_get:request_proto.EngineInfoResponse.enclave_pk)
  return enclave_pk_.GetNoArena();
}
inline void EngineInfoResponse::set_enclave_pk(const ::std::string& value) {
  
  enclave_pk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:request_proto.EngineInfoResponse.enclave_pk)
}
#if LANG_CXX11
inline void EngineInfoResponse::set_enclave_pk(::std::string&& value) {
  
  enclave_pk_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_proto.EngineInfoResponse.enclave_pk)
}
#endif
inline void EngineInfoResponse::set_enclave_pk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  enclave_pk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_proto.EngineInfoResponse.enclave_pk)
}
inline void EngineInfoResponse::set_enclave_pk(const char* value, size_t size) {
  
  enclave_pk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_proto.EngineInfoResponse.enclave_pk)
}
inline ::std::string* EngineInfoResponse::mutable_enclave_pk() {
  
  // @@protoc_insertion_point(field_mutable:request_proto.EngineInfoResponse.enclave_pk)
  return enclave_pk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EngineInfoResponse::release_enclave_pk() {
  // @@protoc_insertion_point(field_release:request_proto.EngineInfoResponse.enclave_pk)
  
  return enclave_pk_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EngineInfoResponse::set_allocated_enclave_pk(::std::string* enclave_pk) {
  if (enclave_pk != nullptr) {
    
  } else {
    
  }
  enclave_pk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enclave_pk);
  // @@protoc_insertion_point(field_set_allocated:request_proto.EngineInfoResponse.enclave_pk)
}

// string error_info = 3;
inline void EngineInfoResponse::clear_error_info() {
  error_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EngineInfoResponse::error_info() const {
  // @@protoc_insertion_point(field_get:request_proto.EngineInfoResponse.error_info)
  return error_info_.GetNoArena();
}
inline void EngineInfoResponse::set_error_info(const ::std::string& value) {
  
  error_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:request_proto.EngineInfoResponse.error_info)
}
#if LANG_CXX11
inline void EngineInfoResponse::set_error_info(::std::string&& value) {
  
  error_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_proto.EngineInfoResponse.error_info)
}
#endif
inline void EngineInfoResponse::set_error_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_proto.EngineInfoResponse.error_info)
}
inline void EngineInfoResponse::set_error_info(const char* value, size_t size) {
  
  error_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_proto.EngineInfoResponse.error_info)
}
inline ::std::string* EngineInfoResponse::mutable_error_info() {
  
  // @@protoc_insertion_point(field_mutable:request_proto.EngineInfoResponse.error_info)
  return error_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EngineInfoResponse::release_error_info() {
  // @@protoc_insertion_point(field_release:request_proto.EngineInfoResponse.error_info)
  
  return error_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EngineInfoResponse::set_allocated_error_info(::std::string* error_info) {
  if (error_info != nullptr) {
    
  } else {
    
  }
  error_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_info);
  // @@protoc_insertion_point(field_set_allocated:request_proto.EngineInfoResponse.error_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace request_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_Register_2eproto
