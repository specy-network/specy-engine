// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Regulator.proto

#include "Regulator.pb.h"
#include "Regulator.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace request_proto {

static const char* Regulator_method_names[] = {
  "/request_proto.Regulator/GetTaskResult",
};

std::unique_ptr< Regulator::Stub> Regulator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Regulator::Stub> stub(new Regulator::Stub(channel));
  return stub;
}

Regulator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetTaskResult_(Regulator_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::request_proto::TaskRequest, ::request_proto::TaskResponse>* Regulator::Stub::GetTaskResultRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::request_proto::TaskRequest, ::request_proto::TaskResponse>::Create(channel_.get(), rpcmethod_GetTaskResult_, context);
}

void Regulator::Stub::experimental_async::GetTaskResult(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::request_proto::TaskRequest,::request_proto::TaskResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::request_proto::TaskRequest,::request_proto::TaskResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetTaskResult_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::request_proto::TaskRequest, ::request_proto::TaskResponse>* Regulator::Stub::AsyncGetTaskResultRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::request_proto::TaskRequest, ::request_proto::TaskResponse>::Create(channel_.get(), cq, rpcmethod_GetTaskResult_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::request_proto::TaskRequest, ::request_proto::TaskResponse>* Regulator::Stub::PrepareAsyncGetTaskResultRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::request_proto::TaskRequest, ::request_proto::TaskResponse>::Create(channel_.get(), cq, rpcmethod_GetTaskResult_, context, false, nullptr);
}

Regulator::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Regulator_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Regulator::Service, ::request_proto::TaskRequest, ::request_proto::TaskResponse>(
          [](Regulator::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::request_proto::TaskResponse,
             ::request_proto::TaskRequest>* stream) {
               return service->GetTaskResult(ctx, stream);
             }, this)));
}

Regulator::Service::~Service() {
}

::grpc::Status Regulator::Service::GetTaskResult(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::request_proto::TaskResponse, ::request_proto::TaskRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace request_proto

