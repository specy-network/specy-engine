// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RuleCheck.proto

#ifndef PROTOBUF_INCLUDED_RuleCheck_2eproto
#define PROTOBUF_INCLUDED_RuleCheck_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RuleCheck_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_RuleCheck_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_RuleCheck_2eproto();
namespace e2e_message {
class ErrorInfo;
class ErrorInfoDefaultTypeInternal;
extern ErrorInfoDefaultTypeInternal _ErrorInfo_default_instance_;
class RuleCheckRequest;
class RuleCheckRequestDefaultTypeInternal;
extern RuleCheckRequestDefaultTypeInternal _RuleCheckRequest_default_instance_;
class RuleCheckResponse;
class RuleCheckResponseDefaultTypeInternal;
extern RuleCheckResponseDefaultTypeInternal _RuleCheckResponse_default_instance_;
class RuleCheckResult;
class RuleCheckResultDefaultTypeInternal;
extern RuleCheckResultDefaultTypeInternal _RuleCheckResult_default_instance_;
class RuleItem;
class RuleItemDefaultTypeInternal;
extern RuleItemDefaultTypeInternal _RuleItem_default_instance_;
}  // namespace e2e_message
namespace google {
namespace protobuf {
template<> ::e2e_message::ErrorInfo* Arena::CreateMaybeMessage<::e2e_message::ErrorInfo>(Arena*);
template<> ::e2e_message::RuleCheckRequest* Arena::CreateMaybeMessage<::e2e_message::RuleCheckRequest>(Arena*);
template<> ::e2e_message::RuleCheckResponse* Arena::CreateMaybeMessage<::e2e_message::RuleCheckResponse>(Arena*);
template<> ::e2e_message::RuleCheckResult* Arena::CreateMaybeMessage<::e2e_message::RuleCheckResult>(Arena*);
template<> ::e2e_message::RuleItem* Arena::CreateMaybeMessage<::e2e_message::RuleItem>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace e2e_message {

// ===================================================================

class RuleItem :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e2e_message.RuleItem) */ {
 public:
  RuleItem();
  virtual ~RuleItem();

  RuleItem(const RuleItem& from);

  inline RuleItem& operator=(const RuleItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RuleItem(RuleItem&& from) noexcept
    : RuleItem() {
    *this = ::std::move(from);
  }

  inline RuleItem& operator=(RuleItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RuleItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuleItem* internal_default_instance() {
    return reinterpret_cast<const RuleItem*>(
               &_RuleItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RuleItem* other);
  friend void swap(RuleItem& a, RuleItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RuleItem* New() const final {
    return CreateMaybeMessage<RuleItem>(nullptr);
  }

  RuleItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RuleItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RuleItem& from);
  void MergeFrom(const RuleItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuleItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string ruleId = 2;
  int ruleid_size() const;
  void clear_ruleid();
  static const int kRuleIdFieldNumber = 2;
  const ::std::string& ruleid(int index) const;
  ::std::string* mutable_ruleid(int index);
  void set_ruleid(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ruleid(int index, ::std::string&& value);
  #endif
  void set_ruleid(int index, const char* value);
  void set_ruleid(int index, const char* value, size_t size);
  ::std::string* add_ruleid();
  void add_ruleid(const ::std::string& value);
  #if LANG_CXX11
  void add_ruleid(::std::string&& value);
  #endif
  void add_ruleid(const char* value);
  void add_ruleid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& ruleid() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_ruleid();

  // string ruleFileName = 1;
  void clear_rulefilename();
  static const int kRuleFileNameFieldNumber = 1;
  const ::std::string& rulefilename() const;
  void set_rulefilename(const ::std::string& value);
  #if LANG_CXX11
  void set_rulefilename(::std::string&& value);
  #endif
  void set_rulefilename(const char* value);
  void set_rulefilename(const char* value, size_t size);
  ::std::string* mutable_rulefilename();
  ::std::string* release_rulefilename();
  void set_allocated_rulefilename(::std::string* rulefilename);

  // @@protoc_insertion_point(class_scope:e2e_message.RuleItem)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> ruleid_;
  ::google::protobuf::internal::ArenaStringPtr rulefilename_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RuleCheck_2eproto;
};
// -------------------------------------------------------------------

class RuleCheckRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e2e_message.RuleCheckRequest) */ {
 public:
  RuleCheckRequest();
  virtual ~RuleCheckRequest();

  RuleCheckRequest(const RuleCheckRequest& from);

  inline RuleCheckRequest& operator=(const RuleCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RuleCheckRequest(RuleCheckRequest&& from) noexcept
    : RuleCheckRequest() {
    *this = ::std::move(from);
  }

  inline RuleCheckRequest& operator=(RuleCheckRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RuleCheckRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuleCheckRequest* internal_default_instance() {
    return reinterpret_cast<const RuleCheckRequest*>(
               &_RuleCheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RuleCheckRequest* other);
  friend void swap(RuleCheckRequest& a, RuleCheckRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RuleCheckRequest* New() const final {
    return CreateMaybeMessage<RuleCheckRequest>(nullptr);
  }

  RuleCheckRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RuleCheckRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RuleCheckRequest& from);
  void MergeFrom(const RuleCheckRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuleCheckRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .e2e_message.RuleItem ruleItems = 5;
  int ruleitems_size() const;
  void clear_ruleitems();
  static const int kRuleItemsFieldNumber = 5;
  ::e2e_message::RuleItem* mutable_ruleitems(int index);
  ::google::protobuf::RepeatedPtrField< ::e2e_message::RuleItem >*
      mutable_ruleitems();
  const ::e2e_message::RuleItem& ruleitems(int index) const;
  ::e2e_message::RuleItem* add_ruleitems();
  const ::google::protobuf::RepeatedPtrField< ::e2e_message::RuleItem >&
      ruleitems() const;

  // string contractId = 1;
  void clear_contractid();
  static const int kContractIdFieldNumber = 1;
  const ::std::string& contractid() const;
  void set_contractid(const ::std::string& value);
  #if LANG_CXX11
  void set_contractid(::std::string&& value);
  #endif
  void set_contractid(const char* value);
  void set_contractid(const char* value, size_t size);
  ::std::string* mutable_contractid();
  ::std::string* release_contractid();
  void set_allocated_contractid(::std::string* contractid);

  // bytes txHash = 2;
  void clear_txhash();
  static const int kTxHashFieldNumber = 2;
  const ::std::string& txhash() const;
  void set_txhash(const ::std::string& value);
  #if LANG_CXX11
  void set_txhash(::std::string&& value);
  #endif
  void set_txhash(const char* value);
  void set_txhash(const void* value, size_t size);
  ::std::string* mutable_txhash();
  ::std::string* release_txhash();
  void set_allocated_txhash(::std::string* txhash);

  // uint64 blockHeight = 3;
  void clear_blockheight();
  static const int kBlockHeightFieldNumber = 3;
  ::google::protobuf::uint64 blockheight() const;
  void set_blockheight(::google::protobuf::uint64 value);

  // uint64 txIndex = 4;
  void clear_txindex();
  static const int kTxIndexFieldNumber = 4;
  ::google::protobuf::uint64 txindex() const;
  void set_txindex(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:e2e_message.RuleCheckRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::e2e_message::RuleItem > ruleitems_;
  ::google::protobuf::internal::ArenaStringPtr contractid_;
  ::google::protobuf::internal::ArenaStringPtr txhash_;
  ::google::protobuf::uint64 blockheight_;
  ::google::protobuf::uint64 txindex_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RuleCheck_2eproto;
};
// -------------------------------------------------------------------

class ErrorInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e2e_message.ErrorInfo) */ {
 public:
  ErrorInfo();
  virtual ~ErrorInfo();

  ErrorInfo(const ErrorInfo& from);

  inline ErrorInfo& operator=(const ErrorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ErrorInfo(ErrorInfo&& from) noexcept
    : ErrorInfo() {
    *this = ::std::move(from);
  }

  inline ErrorInfo& operator=(ErrorInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ErrorInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorInfo* internal_default_instance() {
    return reinterpret_cast<const ErrorInfo*>(
               &_ErrorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ErrorInfo* other);
  friend void swap(ErrorInfo& a, ErrorInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ErrorInfo* New() const final {
    return CreateMaybeMessage<ErrorInfo>(nullptr);
  }

  ErrorInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ErrorInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ErrorInfo& from);
  void MergeFrom(const ErrorInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ruleFileName = 2;
  void clear_rulefilename();
  static const int kRuleFileNameFieldNumber = 2;
  const ::std::string& rulefilename() const;
  void set_rulefilename(const ::std::string& value);
  #if LANG_CXX11
  void set_rulefilename(::std::string&& value);
  #endif
  void set_rulefilename(const char* value);
  void set_rulefilename(const char* value, size_t size);
  ::std::string* mutable_rulefilename();
  ::std::string* release_rulefilename();
  void set_allocated_rulefilename(::std::string* rulefilename);

  // string ruleFileID = 3;
  void clear_rulefileid();
  static const int kRuleFileIDFieldNumber = 3;
  const ::std::string& rulefileid() const;
  void set_rulefileid(const ::std::string& value);
  #if LANG_CXX11
  void set_rulefileid(::std::string&& value);
  #endif
  void set_rulefileid(const char* value);
  void set_rulefileid(const char* value, size_t size);
  ::std::string* mutable_rulefileid();
  ::std::string* release_rulefileid();
  void set_allocated_rulefileid(::std::string* rulefileid);

  // string errorString = 4;
  void clear_errorstring();
  static const int kErrorStringFieldNumber = 4;
  const ::std::string& errorstring() const;
  void set_errorstring(const ::std::string& value);
  #if LANG_CXX11
  void set_errorstring(::std::string&& value);
  #endif
  void set_errorstring(const char* value);
  void set_errorstring(const char* value, size_t size);
  ::std::string* mutable_errorstring();
  ::std::string* release_errorstring();
  void set_allocated_errorstring(::std::string* errorstring);

  // bool status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  bool status() const;
  void set_status(bool value);

  // @@protoc_insertion_point(class_scope:e2e_message.ErrorInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rulefilename_;
  ::google::protobuf::internal::ArenaStringPtr rulefileid_;
  ::google::protobuf::internal::ArenaStringPtr errorstring_;
  bool status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RuleCheck_2eproto;
};
// -------------------------------------------------------------------

class RuleCheckResult :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e2e_message.RuleCheckResult) */ {
 public:
  RuleCheckResult();
  virtual ~RuleCheckResult();

  RuleCheckResult(const RuleCheckResult& from);

  inline RuleCheckResult& operator=(const RuleCheckResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RuleCheckResult(RuleCheckResult&& from) noexcept
    : RuleCheckResult() {
    *this = ::std::move(from);
  }

  inline RuleCheckResult& operator=(RuleCheckResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RuleCheckResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuleCheckResult* internal_default_instance() {
    return reinterpret_cast<const RuleCheckResult*>(
               &_RuleCheckResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RuleCheckResult* other);
  friend void swap(RuleCheckResult& a, RuleCheckResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RuleCheckResult* New() const final {
    return CreateMaybeMessage<RuleCheckResult>(nullptr);
  }

  RuleCheckResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RuleCheckResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RuleCheckResult& from);
  void MergeFrom(const RuleCheckResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuleCheckResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .e2e_message.ErrorInfo errorInfo = 3;
  int errorinfo_size() const;
  void clear_errorinfo();
  static const int kErrorInfoFieldNumber = 3;
  ::e2e_message::ErrorInfo* mutable_errorinfo(int index);
  ::google::protobuf::RepeatedPtrField< ::e2e_message::ErrorInfo >*
      mutable_errorinfo();
  const ::e2e_message::ErrorInfo& errorinfo(int index) const;
  ::e2e_message::ErrorInfo* add_errorinfo();
  const ::google::protobuf::RepeatedPtrField< ::e2e_message::ErrorInfo >&
      errorinfo() const;

  // string contractid = 1;
  void clear_contractid();
  static const int kContractidFieldNumber = 1;
  const ::std::string& contractid() const;
  void set_contractid(const ::std::string& value);
  #if LANG_CXX11
  void set_contractid(::std::string&& value);
  #endif
  void set_contractid(const char* value);
  void set_contractid(const char* value, size_t size);
  ::std::string* mutable_contractid();
  ::std::string* release_contractid();
  void set_allocated_contractid(::std::string* contractid);

  // bool status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  bool status() const;
  void set_status(bool value);

  // @@protoc_insertion_point(class_scope:e2e_message.RuleCheckResult)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::e2e_message::ErrorInfo > errorinfo_;
  ::google::protobuf::internal::ArenaStringPtr contractid_;
  bool status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RuleCheck_2eproto;
};
// -------------------------------------------------------------------

class RuleCheckResponse :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e2e_message.RuleCheckResponse) */ {
 public:
  RuleCheckResponse();
  virtual ~RuleCheckResponse();

  RuleCheckResponse(const RuleCheckResponse& from);

  inline RuleCheckResponse& operator=(const RuleCheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RuleCheckResponse(RuleCheckResponse&& from) noexcept
    : RuleCheckResponse() {
    *this = ::std::move(from);
  }

  inline RuleCheckResponse& operator=(RuleCheckResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RuleCheckResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuleCheckResponse* internal_default_instance() {
    return reinterpret_cast<const RuleCheckResponse*>(
               &_RuleCheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RuleCheckResponse* other);
  friend void swap(RuleCheckResponse& a, RuleCheckResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RuleCheckResponse* New() const final {
    return CreateMaybeMessage<RuleCheckResponse>(nullptr);
  }

  RuleCheckResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RuleCheckResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RuleCheckResponse& from);
  void MergeFrom(const RuleCheckResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuleCheckResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .e2e_message.RuleCheckResult results = 2;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 2;
  ::e2e_message::RuleCheckResult* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField< ::e2e_message::RuleCheckResult >*
      mutable_results();
  const ::e2e_message::RuleCheckResult& results(int index) const;
  ::e2e_message::RuleCheckResult* add_results();
  const ::google::protobuf::RepeatedPtrField< ::e2e_message::RuleCheckResult >&
      results() const;

  // bool status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  bool status() const;
  void set_status(bool value);

  // @@protoc_insertion_point(class_scope:e2e_message.RuleCheckResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::e2e_message::RuleCheckResult > results_;
  bool status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RuleCheck_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RuleItem

// string ruleFileName = 1;
inline void RuleItem::clear_rulefilename() {
  rulefilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RuleItem::rulefilename() const {
  // @@protoc_insertion_point(field_get:e2e_message.RuleItem.ruleFileName)
  return rulefilename_.GetNoArena();
}
inline void RuleItem::set_rulefilename(const ::std::string& value) {
  
  rulefilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:e2e_message.RuleItem.ruleFileName)
}
#if LANG_CXX11
inline void RuleItem::set_rulefilename(::std::string&& value) {
  
  rulefilename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:e2e_message.RuleItem.ruleFileName)
}
#endif
inline void RuleItem::set_rulefilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rulefilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:e2e_message.RuleItem.ruleFileName)
}
inline void RuleItem::set_rulefilename(const char* value, size_t size) {
  
  rulefilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:e2e_message.RuleItem.ruleFileName)
}
inline ::std::string* RuleItem::mutable_rulefilename() {
  
  // @@protoc_insertion_point(field_mutable:e2e_message.RuleItem.ruleFileName)
  return rulefilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RuleItem::release_rulefilename() {
  // @@protoc_insertion_point(field_release:e2e_message.RuleItem.ruleFileName)
  
  return rulefilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RuleItem::set_allocated_rulefilename(::std::string* rulefilename) {
  if (rulefilename != nullptr) {
    
  } else {
    
  }
  rulefilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rulefilename);
  // @@protoc_insertion_point(field_set_allocated:e2e_message.RuleItem.ruleFileName)
}

// repeated string ruleId = 2;
inline int RuleItem::ruleid_size() const {
  return ruleid_.size();
}
inline void RuleItem::clear_ruleid() {
  ruleid_.Clear();
}
inline const ::std::string& RuleItem::ruleid(int index) const {
  // @@protoc_insertion_point(field_get:e2e_message.RuleItem.ruleId)
  return ruleid_.Get(index);
}
inline ::std::string* RuleItem::mutable_ruleid(int index) {
  // @@protoc_insertion_point(field_mutable:e2e_message.RuleItem.ruleId)
  return ruleid_.Mutable(index);
}
inline void RuleItem::set_ruleid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:e2e_message.RuleItem.ruleId)
  ruleid_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void RuleItem::set_ruleid(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:e2e_message.RuleItem.ruleId)
  ruleid_.Mutable(index)->assign(std::move(value));
}
#endif
inline void RuleItem::set_ruleid(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ruleid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:e2e_message.RuleItem.ruleId)
}
inline void RuleItem::set_ruleid(int index, const char* value, size_t size) {
  ruleid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:e2e_message.RuleItem.ruleId)
}
inline ::std::string* RuleItem::add_ruleid() {
  // @@protoc_insertion_point(field_add_mutable:e2e_message.RuleItem.ruleId)
  return ruleid_.Add();
}
inline void RuleItem::add_ruleid(const ::std::string& value) {
  ruleid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:e2e_message.RuleItem.ruleId)
}
#if LANG_CXX11
inline void RuleItem::add_ruleid(::std::string&& value) {
  ruleid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:e2e_message.RuleItem.ruleId)
}
#endif
inline void RuleItem::add_ruleid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ruleid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:e2e_message.RuleItem.ruleId)
}
inline void RuleItem::add_ruleid(const char* value, size_t size) {
  ruleid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:e2e_message.RuleItem.ruleId)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
RuleItem::ruleid() const {
  // @@protoc_insertion_point(field_list:e2e_message.RuleItem.ruleId)
  return ruleid_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
RuleItem::mutable_ruleid() {
  // @@protoc_insertion_point(field_mutable_list:e2e_message.RuleItem.ruleId)
  return &ruleid_;
}

// -------------------------------------------------------------------

// RuleCheckRequest

// string contractId = 1;
inline void RuleCheckRequest::clear_contractid() {
  contractid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RuleCheckRequest::contractid() const {
  // @@protoc_insertion_point(field_get:e2e_message.RuleCheckRequest.contractId)
  return contractid_.GetNoArena();
}
inline void RuleCheckRequest::set_contractid(const ::std::string& value) {
  
  contractid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:e2e_message.RuleCheckRequest.contractId)
}
#if LANG_CXX11
inline void RuleCheckRequest::set_contractid(::std::string&& value) {
  
  contractid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:e2e_message.RuleCheckRequest.contractId)
}
#endif
inline void RuleCheckRequest::set_contractid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contractid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:e2e_message.RuleCheckRequest.contractId)
}
inline void RuleCheckRequest::set_contractid(const char* value, size_t size) {
  
  contractid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:e2e_message.RuleCheckRequest.contractId)
}
inline ::std::string* RuleCheckRequest::mutable_contractid() {
  
  // @@protoc_insertion_point(field_mutable:e2e_message.RuleCheckRequest.contractId)
  return contractid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RuleCheckRequest::release_contractid() {
  // @@protoc_insertion_point(field_release:e2e_message.RuleCheckRequest.contractId)
  
  return contractid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RuleCheckRequest::set_allocated_contractid(::std::string* contractid) {
  if (contractid != nullptr) {
    
  } else {
    
  }
  contractid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contractid);
  // @@protoc_insertion_point(field_set_allocated:e2e_message.RuleCheckRequest.contractId)
}

// bytes txHash = 2;
inline void RuleCheckRequest::clear_txhash() {
  txhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RuleCheckRequest::txhash() const {
  // @@protoc_insertion_point(field_get:e2e_message.RuleCheckRequest.txHash)
  return txhash_.GetNoArena();
}
inline void RuleCheckRequest::set_txhash(const ::std::string& value) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:e2e_message.RuleCheckRequest.txHash)
}
#if LANG_CXX11
inline void RuleCheckRequest::set_txhash(::std::string&& value) {
  
  txhash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:e2e_message.RuleCheckRequest.txHash)
}
#endif
inline void RuleCheckRequest::set_txhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:e2e_message.RuleCheckRequest.txHash)
}
inline void RuleCheckRequest::set_txhash(const void* value, size_t size) {
  
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:e2e_message.RuleCheckRequest.txHash)
}
inline ::std::string* RuleCheckRequest::mutable_txhash() {
  
  // @@protoc_insertion_point(field_mutable:e2e_message.RuleCheckRequest.txHash)
  return txhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RuleCheckRequest::release_txhash() {
  // @@protoc_insertion_point(field_release:e2e_message.RuleCheckRequest.txHash)
  
  return txhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RuleCheckRequest::set_allocated_txhash(::std::string* txhash) {
  if (txhash != nullptr) {
    
  } else {
    
  }
  txhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txhash);
  // @@protoc_insertion_point(field_set_allocated:e2e_message.RuleCheckRequest.txHash)
}

// uint64 blockHeight = 3;
inline void RuleCheckRequest::clear_blockheight() {
  blockheight_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RuleCheckRequest::blockheight() const {
  // @@protoc_insertion_point(field_get:e2e_message.RuleCheckRequest.blockHeight)
  return blockheight_;
}
inline void RuleCheckRequest::set_blockheight(::google::protobuf::uint64 value) {
  
  blockheight_ = value;
  // @@protoc_insertion_point(field_set:e2e_message.RuleCheckRequest.blockHeight)
}

// uint64 txIndex = 4;
inline void RuleCheckRequest::clear_txindex() {
  txindex_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RuleCheckRequest::txindex() const {
  // @@protoc_insertion_point(field_get:e2e_message.RuleCheckRequest.txIndex)
  return txindex_;
}
inline void RuleCheckRequest::set_txindex(::google::protobuf::uint64 value) {
  
  txindex_ = value;
  // @@protoc_insertion_point(field_set:e2e_message.RuleCheckRequest.txIndex)
}

// repeated .e2e_message.RuleItem ruleItems = 5;
inline int RuleCheckRequest::ruleitems_size() const {
  return ruleitems_.size();
}
inline void RuleCheckRequest::clear_ruleitems() {
  ruleitems_.Clear();
}
inline ::e2e_message::RuleItem* RuleCheckRequest::mutable_ruleitems(int index) {
  // @@protoc_insertion_point(field_mutable:e2e_message.RuleCheckRequest.ruleItems)
  return ruleitems_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::e2e_message::RuleItem >*
RuleCheckRequest::mutable_ruleitems() {
  // @@protoc_insertion_point(field_mutable_list:e2e_message.RuleCheckRequest.ruleItems)
  return &ruleitems_;
}
inline const ::e2e_message::RuleItem& RuleCheckRequest::ruleitems(int index) const {
  // @@protoc_insertion_point(field_get:e2e_message.RuleCheckRequest.ruleItems)
  return ruleitems_.Get(index);
}
inline ::e2e_message::RuleItem* RuleCheckRequest::add_ruleitems() {
  // @@protoc_insertion_point(field_add:e2e_message.RuleCheckRequest.ruleItems)
  return ruleitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::e2e_message::RuleItem >&
RuleCheckRequest::ruleitems() const {
  // @@protoc_insertion_point(field_list:e2e_message.RuleCheckRequest.ruleItems)
  return ruleitems_;
}

// -------------------------------------------------------------------

// ErrorInfo

// bool status = 1;
inline void ErrorInfo::clear_status() {
  status_ = false;
}
inline bool ErrorInfo::status() const {
  // @@protoc_insertion_point(field_get:e2e_message.ErrorInfo.status)
  return status_;
}
inline void ErrorInfo::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:e2e_message.ErrorInfo.status)
}

// string ruleFileName = 2;
inline void ErrorInfo::clear_rulefilename() {
  rulefilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ErrorInfo::rulefilename() const {
  // @@protoc_insertion_point(field_get:e2e_message.ErrorInfo.ruleFileName)
  return rulefilename_.GetNoArena();
}
inline void ErrorInfo::set_rulefilename(const ::std::string& value) {
  
  rulefilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:e2e_message.ErrorInfo.ruleFileName)
}
#if LANG_CXX11
inline void ErrorInfo::set_rulefilename(::std::string&& value) {
  
  rulefilename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:e2e_message.ErrorInfo.ruleFileName)
}
#endif
inline void ErrorInfo::set_rulefilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rulefilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:e2e_message.ErrorInfo.ruleFileName)
}
inline void ErrorInfo::set_rulefilename(const char* value, size_t size) {
  
  rulefilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:e2e_message.ErrorInfo.ruleFileName)
}
inline ::std::string* ErrorInfo::mutable_rulefilename() {
  
  // @@protoc_insertion_point(field_mutable:e2e_message.ErrorInfo.ruleFileName)
  return rulefilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ErrorInfo::release_rulefilename() {
  // @@protoc_insertion_point(field_release:e2e_message.ErrorInfo.ruleFileName)
  
  return rulefilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorInfo::set_allocated_rulefilename(::std::string* rulefilename) {
  if (rulefilename != nullptr) {
    
  } else {
    
  }
  rulefilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rulefilename);
  // @@protoc_insertion_point(field_set_allocated:e2e_message.ErrorInfo.ruleFileName)
}

// string ruleFileID = 3;
inline void ErrorInfo::clear_rulefileid() {
  rulefileid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ErrorInfo::rulefileid() const {
  // @@protoc_insertion_point(field_get:e2e_message.ErrorInfo.ruleFileID)
  return rulefileid_.GetNoArena();
}
inline void ErrorInfo::set_rulefileid(const ::std::string& value) {
  
  rulefileid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:e2e_message.ErrorInfo.ruleFileID)
}
#if LANG_CXX11
inline void ErrorInfo::set_rulefileid(::std::string&& value) {
  
  rulefileid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:e2e_message.ErrorInfo.ruleFileID)
}
#endif
inline void ErrorInfo::set_rulefileid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rulefileid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:e2e_message.ErrorInfo.ruleFileID)
}
inline void ErrorInfo::set_rulefileid(const char* value, size_t size) {
  
  rulefileid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:e2e_message.ErrorInfo.ruleFileID)
}
inline ::std::string* ErrorInfo::mutable_rulefileid() {
  
  // @@protoc_insertion_point(field_mutable:e2e_message.ErrorInfo.ruleFileID)
  return rulefileid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ErrorInfo::release_rulefileid() {
  // @@protoc_insertion_point(field_release:e2e_message.ErrorInfo.ruleFileID)
  
  return rulefileid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorInfo::set_allocated_rulefileid(::std::string* rulefileid) {
  if (rulefileid != nullptr) {
    
  } else {
    
  }
  rulefileid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rulefileid);
  // @@protoc_insertion_point(field_set_allocated:e2e_message.ErrorInfo.ruleFileID)
}

// string errorString = 4;
inline void ErrorInfo::clear_errorstring() {
  errorstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ErrorInfo::errorstring() const {
  // @@protoc_insertion_point(field_get:e2e_message.ErrorInfo.errorString)
  return errorstring_.GetNoArena();
}
inline void ErrorInfo::set_errorstring(const ::std::string& value) {
  
  errorstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:e2e_message.ErrorInfo.errorString)
}
#if LANG_CXX11
inline void ErrorInfo::set_errorstring(::std::string&& value) {
  
  errorstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:e2e_message.ErrorInfo.errorString)
}
#endif
inline void ErrorInfo::set_errorstring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errorstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:e2e_message.ErrorInfo.errorString)
}
inline void ErrorInfo::set_errorstring(const char* value, size_t size) {
  
  errorstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:e2e_message.ErrorInfo.errorString)
}
inline ::std::string* ErrorInfo::mutable_errorstring() {
  
  // @@protoc_insertion_point(field_mutable:e2e_message.ErrorInfo.errorString)
  return errorstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ErrorInfo::release_errorstring() {
  // @@protoc_insertion_point(field_release:e2e_message.ErrorInfo.errorString)
  
  return errorstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorInfo::set_allocated_errorstring(::std::string* errorstring) {
  if (errorstring != nullptr) {
    
  } else {
    
  }
  errorstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errorstring);
  // @@protoc_insertion_point(field_set_allocated:e2e_message.ErrorInfo.errorString)
}

// -------------------------------------------------------------------

// RuleCheckResult

// string contractid = 1;
inline void RuleCheckResult::clear_contractid() {
  contractid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RuleCheckResult::contractid() const {
  // @@protoc_insertion_point(field_get:e2e_message.RuleCheckResult.contractid)
  return contractid_.GetNoArena();
}
inline void RuleCheckResult::set_contractid(const ::std::string& value) {
  
  contractid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:e2e_message.RuleCheckResult.contractid)
}
#if LANG_CXX11
inline void RuleCheckResult::set_contractid(::std::string&& value) {
  
  contractid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:e2e_message.RuleCheckResult.contractid)
}
#endif
inline void RuleCheckResult::set_contractid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contractid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:e2e_message.RuleCheckResult.contractid)
}
inline void RuleCheckResult::set_contractid(const char* value, size_t size) {
  
  contractid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:e2e_message.RuleCheckResult.contractid)
}
inline ::std::string* RuleCheckResult::mutable_contractid() {
  
  // @@protoc_insertion_point(field_mutable:e2e_message.RuleCheckResult.contractid)
  return contractid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RuleCheckResult::release_contractid() {
  // @@protoc_insertion_point(field_release:e2e_message.RuleCheckResult.contractid)
  
  return contractid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RuleCheckResult::set_allocated_contractid(::std::string* contractid) {
  if (contractid != nullptr) {
    
  } else {
    
  }
  contractid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contractid);
  // @@protoc_insertion_point(field_set_allocated:e2e_message.RuleCheckResult.contractid)
}

// bool status = 2;
inline void RuleCheckResult::clear_status() {
  status_ = false;
}
inline bool RuleCheckResult::status() const {
  // @@protoc_insertion_point(field_get:e2e_message.RuleCheckResult.status)
  return status_;
}
inline void RuleCheckResult::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:e2e_message.RuleCheckResult.status)
}

// repeated .e2e_message.ErrorInfo errorInfo = 3;
inline int RuleCheckResult::errorinfo_size() const {
  return errorinfo_.size();
}
inline void RuleCheckResult::clear_errorinfo() {
  errorinfo_.Clear();
}
inline ::e2e_message::ErrorInfo* RuleCheckResult::mutable_errorinfo(int index) {
  // @@protoc_insertion_point(field_mutable:e2e_message.RuleCheckResult.errorInfo)
  return errorinfo_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::e2e_message::ErrorInfo >*
RuleCheckResult::mutable_errorinfo() {
  // @@protoc_insertion_point(field_mutable_list:e2e_message.RuleCheckResult.errorInfo)
  return &errorinfo_;
}
inline const ::e2e_message::ErrorInfo& RuleCheckResult::errorinfo(int index) const {
  // @@protoc_insertion_point(field_get:e2e_message.RuleCheckResult.errorInfo)
  return errorinfo_.Get(index);
}
inline ::e2e_message::ErrorInfo* RuleCheckResult::add_errorinfo() {
  // @@protoc_insertion_point(field_add:e2e_message.RuleCheckResult.errorInfo)
  return errorinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::e2e_message::ErrorInfo >&
RuleCheckResult::errorinfo() const {
  // @@protoc_insertion_point(field_list:e2e_message.RuleCheckResult.errorInfo)
  return errorinfo_;
}

// -------------------------------------------------------------------

// RuleCheckResponse

// bool status = 1;
inline void RuleCheckResponse::clear_status() {
  status_ = false;
}
inline bool RuleCheckResponse::status() const {
  // @@protoc_insertion_point(field_get:e2e_message.RuleCheckResponse.status)
  return status_;
}
inline void RuleCheckResponse::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:e2e_message.RuleCheckResponse.status)
}

// repeated .e2e_message.RuleCheckResult results = 2;
inline int RuleCheckResponse::results_size() const {
  return results_.size();
}
inline void RuleCheckResponse::clear_results() {
  results_.Clear();
}
inline ::e2e_message::RuleCheckResult* RuleCheckResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:e2e_message.RuleCheckResponse.results)
  return results_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::e2e_message::RuleCheckResult >*
RuleCheckResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:e2e_message.RuleCheckResponse.results)
  return &results_;
}
inline const ::e2e_message::RuleCheckResult& RuleCheckResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:e2e_message.RuleCheckResponse.results)
  return results_.Get(index);
}
inline ::e2e_message::RuleCheckResult* RuleCheckResponse::add_results() {
  // @@protoc_insertion_point(field_add:e2e_message.RuleCheckResponse.results)
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::e2e_message::RuleCheckResult >&
RuleCheckResponse::results() const {
  // @@protoc_insertion_point(field_list:e2e_message.RuleCheckResponse.results)
  return results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace e2e_message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_RuleCheck_2eproto
