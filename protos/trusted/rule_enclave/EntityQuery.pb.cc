// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EntityQuery.proto

#include "EntityQuery.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_EntityQuery_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Provided_EntityQuery_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_EntityQuery_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Where_EntityQuery_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_EntityQuery_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Within_EntityQuery_2eproto;
namespace rule_check_proto {
class ConstraintDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Constraint> _instance;
  const ::rule_check_proto::Provided* provided_;
  const ::rule_check_proto::Within* within_;
  const ::rule_check_proto::Where* where_;
} _Constraint_default_instance_;
class ProvidedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Provided> _instance;
} _Provided_default_instance_;
class WithinDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Within> _instance;
} _Within_default_instance_;
class WhereDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Where> _instance;
} _Where_default_instance_;
}  // namespace rule_check_proto
static void InitDefaultsConstraint_EntityQuery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rule_check_proto::_Constraint_default_instance_;
    new (ptr) ::rule_check_proto::Constraint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rule_check_proto::Constraint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Constraint_EntityQuery_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsConstraint_EntityQuery_2eproto}, {
      &scc_info_Provided_EntityQuery_2eproto.base,
      &scc_info_Within_EntityQuery_2eproto.base,
      &scc_info_Where_EntityQuery_2eproto.base,}};

static void InitDefaultsProvided_EntityQuery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rule_check_proto::_Provided_default_instance_;
    new (ptr) ::rule_check_proto::Provided();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rule_check_proto::Provided::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Provided_EntityQuery_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProvided_EntityQuery_2eproto}, {}};

static void InitDefaultsWithin_EntityQuery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rule_check_proto::_Within_default_instance_;
    new (ptr) ::rule_check_proto::Within();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rule_check_proto::Within::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Within_EntityQuery_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWithin_EntityQuery_2eproto}, {}};

static void InitDefaultsWhere_EntityQuery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rule_check_proto::_Where_default_instance_;
    new (ptr) ::rule_check_proto::Where();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rule_check_proto::Where::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Where_EntityQuery_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWhere_EntityQuery_2eproto}, {}};

void InitDefaults_EntityQuery_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Constraint_EntityQuery_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Provided_EntityQuery_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Within_EntityQuery_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Where_EntityQuery_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_EntityQuery_2eproto[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_EntityQuery_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_EntityQuery_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_EntityQuery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rule_check_proto::Constraint, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::rule_check_proto::Constraint, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::rule_check_proto::ConstraintDefaultTypeInternal, provided_),
  offsetof(::rule_check_proto::ConstraintDefaultTypeInternal, within_),
  offsetof(::rule_check_proto::ConstraintDefaultTypeInternal, where_),
  PROTOBUF_FIELD_OFFSET(::rule_check_proto::Constraint, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rule_check_proto::Provided, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rule_check_proto::Provided, entity_),
  PROTOBUF_FIELD_OFFSET(::rule_check_proto::Provided, member_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rule_check_proto::Within, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rule_check_proto::Within, value_),
  PROTOBUF_FIELD_OFFSET(::rule_check_proto::Within, unit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rule_check_proto::Where, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rule_check_proto::Where, left_entity_),
  PROTOBUF_FIELD_OFFSET(::rule_check_proto::Where, left_member_),
  PROTOBUF_FIELD_OFFSET(::rule_check_proto::Where, operator__),
  PROTOBUF_FIELD_OFFSET(::rule_check_proto::Where, right_entity_),
  PROTOBUF_FIELD_OFFSET(::rule_check_proto::Where, right_member_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rule_check_proto::Constraint)},
  { 9, -1, sizeof(::rule_check_proto::Provided)},
  { 16, -1, sizeof(::rule_check_proto::Within)},
  { 23, -1, sizeof(::rule_check_proto::Where)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::rule_check_proto::_Constraint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rule_check_proto::_Provided_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rule_check_proto::_Within_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rule_check_proto::_Where_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_EntityQuery_2eproto = {
  {}, AddDescriptors_EntityQuery_2eproto, "EntityQuery.proto", schemas,
  file_default_instances, TableStruct_EntityQuery_2eproto::offsets,
  file_level_metadata_EntityQuery_2eproto, 4, file_level_enum_descriptors_EntityQuery_2eproto, file_level_service_descriptors_EntityQuery_2eproto,
};

const char descriptor_table_protodef_EntityQuery_2eproto[] =
  "\n\021EntityQuery.proto\022\020rule_check_proto\"\235\001"
  "\n\nConstraint\022.\n\010provided\030\001 \001(\0132\032.rule_ch"
  "eck_proto.ProvidedH\000\022*\n\006within\030\002 \001(\0132\030.r"
  "ule_check_proto.WithinH\000\022(\n\005where\030\003 \001(\0132"
  "\027.rule_check_proto.WhereH\000B\t\n\007content\"*\n"
  "\010Provided\022\016\n\006entity\030\001 \001(\t\022\016\n\006member\030\002 \001("
  "\t\"s\n\006Within\022\r\n\005value\030\001 \001(\004\022+\n\004unit\030\002 \001(\016"
  "2\035.rule_check_proto.Within.UNIT\"-\n\004UNIT\022"
  "\007\n\003SEC\020\000\022\t\n\005MINIT\020\001\022\010\n\004HOUR\020\002\022\007\n\003DAY\020\003\"\320"
  "\001\n\005Where\022\023\n\013left_entity\030\001 \001(\t\022\023\n\013left_me"
  "mber\030\002 \001(\t\0222\n\010operator\030\003 \001(\0162 .rule_chec"
  "k_proto.Where.OPERATOR\022\024\n\014right_entity\030\004"
  " \001(\t\022\024\n\014right_member\030\005 \001(\t\"=\n\010OPERATOR\022\006"
  "\n\002EQ\020\000\022\007\n\003NEQ\020\001\022\006\n\002GT\020\002\022\006\n\002LT\020\003\022\007\n\003EGT\020\004"
  "\022\007\n\003ELT\020\005b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_EntityQuery_2eproto = {
  false, InitDefaults_EntityQuery_2eproto, 
  descriptor_table_protodef_EntityQuery_2eproto,
  "EntityQuery.proto", &assign_descriptors_table_EntityQuery_2eproto, 577,
};

void AddDescriptors_EntityQuery_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_EntityQuery_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_EntityQuery_2eproto = []() { AddDescriptors_EntityQuery_2eproto(); return true; }();
namespace rule_check_proto {
const ::google::protobuf::EnumDescriptor* Within_UNIT_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_EntityQuery_2eproto);
  return file_level_enum_descriptors_EntityQuery_2eproto[0];
}
bool Within_UNIT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Within_UNIT Within::SEC;
const Within_UNIT Within::MINIT;
const Within_UNIT Within::HOUR;
const Within_UNIT Within::DAY;
const Within_UNIT Within::UNIT_MIN;
const Within_UNIT Within::UNIT_MAX;
const int Within::UNIT_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Where_OPERATOR_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_EntityQuery_2eproto);
  return file_level_enum_descriptors_EntityQuery_2eproto[1];
}
bool Where_OPERATOR_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Where_OPERATOR Where::EQ;
const Where_OPERATOR Where::NEQ;
const Where_OPERATOR Where::GT;
const Where_OPERATOR Where::LT;
const Where_OPERATOR Where::EGT;
const Where_OPERATOR Where::ELT;
const Where_OPERATOR Where::OPERATOR_MIN;
const Where_OPERATOR Where::OPERATOR_MAX;
const int Where::OPERATOR_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Constraint::InitAsDefaultInstance() {
  ::rule_check_proto::_Constraint_default_instance_.provided_ = const_cast< ::rule_check_proto::Provided*>(
      ::rule_check_proto::Provided::internal_default_instance());
  ::rule_check_proto::_Constraint_default_instance_.within_ = const_cast< ::rule_check_proto::Within*>(
      ::rule_check_proto::Within::internal_default_instance());
  ::rule_check_proto::_Constraint_default_instance_.where_ = const_cast< ::rule_check_proto::Where*>(
      ::rule_check_proto::Where::internal_default_instance());
}
class Constraint::HasBitSetters {
 public:
  static const ::rule_check_proto::Provided& provided(const Constraint* msg);
  static const ::rule_check_proto::Within& within(const Constraint* msg);
  static const ::rule_check_proto::Where& where(const Constraint* msg);
};

const ::rule_check_proto::Provided&
Constraint::HasBitSetters::provided(const Constraint* msg) {
  return *msg->content_.provided_;
}
const ::rule_check_proto::Within&
Constraint::HasBitSetters::within(const Constraint* msg) {
  return *msg->content_.within_;
}
const ::rule_check_proto::Where&
Constraint::HasBitSetters::where(const Constraint* msg) {
  return *msg->content_.where_;
}
void Constraint::set_allocated_provided(::rule_check_proto::Provided* provided) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (provided) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      provided = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, provided, submessage_arena);
    }
    set_has_provided();
    content_.provided_ = provided;
  }
  // @@protoc_insertion_point(field_set_allocated:rule_check_proto.Constraint.provided)
}
void Constraint::set_allocated_within(::rule_check_proto::Within* within) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (within) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      within = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, within, submessage_arena);
    }
    set_has_within();
    content_.within_ = within;
  }
  // @@protoc_insertion_point(field_set_allocated:rule_check_proto.Constraint.within)
}
void Constraint::set_allocated_where(::rule_check_proto::Where* where) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (where) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      where = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, where, submessage_arena);
    }
    set_has_where();
    content_.where_ = where;
  }
  // @@protoc_insertion_point(field_set_allocated:rule_check_proto.Constraint.where)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Constraint::kProvidedFieldNumber;
const int Constraint::kWithinFieldNumber;
const int Constraint::kWhereFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Constraint::Constraint()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rule_check_proto.Constraint)
}
Constraint::Constraint(const Constraint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_content();
  switch (from.content_case()) {
    case kProvided: {
      mutable_provided()->::rule_check_proto::Provided::MergeFrom(from.provided());
      break;
    }
    case kWithin: {
      mutable_within()->::rule_check_proto::Within::MergeFrom(from.within());
      break;
    }
    case kWhere: {
      mutable_where()->::rule_check_proto::Where::MergeFrom(from.where());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:rule_check_proto.Constraint)
}

void Constraint::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Constraint_EntityQuery_2eproto.base);
  clear_has_content();
}

Constraint::~Constraint() {
  // @@protoc_insertion_point(destructor:rule_check_proto.Constraint)
  SharedDtor();
}

void Constraint::SharedDtor() {
  if (has_content()) {
    clear_content();
  }
}

void Constraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Constraint& Constraint::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Constraint_EntityQuery_2eproto.base);
  return *internal_default_instance();
}


void Constraint::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:rule_check_proto.Constraint)
  switch (content_case()) {
    case kProvided: {
      delete content_.provided_;
      break;
    }
    case kWithin: {
      delete content_.within_;
      break;
    }
    case kWhere: {
      delete content_.where_;
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void Constraint::Clear() {
// @@protoc_insertion_point(message_clear_start:rule_check_proto.Constraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_content();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Constraint::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Constraint*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .rule_check_proto.Provided provided = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::rule_check_proto::Provided::_InternalParse;
        object = msg->mutable_provided();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .rule_check_proto.Within within = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::rule_check_proto::Within::_InternalParse;
        object = msg->mutable_within();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .rule_check_proto.Where where = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::rule_check_proto::Where::_InternalParse;
        object = msg->mutable_where();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Constraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rule_check_proto.Constraint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .rule_check_proto.Provided provided = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_provided()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rule_check_proto.Within within = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_within()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rule_check_proto.Where where = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_where()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rule_check_proto.Constraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rule_check_proto.Constraint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Constraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rule_check_proto.Constraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rule_check_proto.Provided provided = 1;
  if (has_provided()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::provided(this), output);
  }

  // .rule_check_proto.Within within = 2;
  if (has_within()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::within(this), output);
  }

  // .rule_check_proto.Where where = 3;
  if (has_where()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::where(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rule_check_proto.Constraint)
}

::google::protobuf::uint8* Constraint::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rule_check_proto.Constraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .rule_check_proto.Provided provided = 1;
  if (has_provided()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::provided(this), target);
  }

  // .rule_check_proto.Within within = 2;
  if (has_within()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::within(this), target);
  }

  // .rule_check_proto.Where where = 3;
  if (has_where()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::where(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rule_check_proto.Constraint)
  return target;
}

size_t Constraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rule_check_proto.Constraint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (content_case()) {
    // .rule_check_proto.Provided provided = 1;
    case kProvided: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.provided_);
      break;
    }
    // .rule_check_proto.Within within = 2;
    case kWithin: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.within_);
      break;
    }
    // .rule_check_proto.Where where = 3;
    case kWhere: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.where_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Constraint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rule_check_proto.Constraint)
  GOOGLE_DCHECK_NE(&from, this);
  const Constraint* source =
      ::google::protobuf::DynamicCastToGenerated<Constraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rule_check_proto.Constraint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rule_check_proto.Constraint)
    MergeFrom(*source);
  }
}

void Constraint::MergeFrom(const Constraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rule_check_proto.Constraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.content_case()) {
    case kProvided: {
      mutable_provided()->::rule_check_proto::Provided::MergeFrom(from.provided());
      break;
    }
    case kWithin: {
      mutable_within()->::rule_check_proto::Within::MergeFrom(from.within());
      break;
    }
    case kWhere: {
      mutable_where()->::rule_check_proto::Where::MergeFrom(from.where());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void Constraint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rule_check_proto.Constraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Constraint::CopyFrom(const Constraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rule_check_proto.Constraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Constraint::IsInitialized() const {
  return true;
}

void Constraint::Swap(Constraint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Constraint::InternalSwap(Constraint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Constraint::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_EntityQuery_2eproto);
  return ::file_level_metadata_EntityQuery_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Provided::InitAsDefaultInstance() {
}
class Provided::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Provided::kEntityFieldNumber;
const int Provided::kMemberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Provided::Provided()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rule_check_proto.Provided)
}
Provided::Provided(const Provided& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.entity().size() > 0) {
    entity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_);
  }
  member_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.member().size() > 0) {
    member_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.member_);
  }
  // @@protoc_insertion_point(copy_constructor:rule_check_proto.Provided)
}

void Provided::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Provided_EntityQuery_2eproto.base);
  entity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  member_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Provided::~Provided() {
  // @@protoc_insertion_point(destructor:rule_check_proto.Provided)
  SharedDtor();
}

void Provided::SharedDtor() {
  entity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  member_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Provided::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Provided& Provided::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Provided_EntityQuery_2eproto.base);
  return *internal_default_instance();
}


void Provided::Clear() {
// @@protoc_insertion_point(message_clear_start:rule_check_proto.Provided)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  member_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Provided::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Provided*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string entity = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("rule_check_proto.Provided.entity");
        object = msg->mutable_entity();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string member = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("rule_check_proto.Provided.member");
        object = msg->mutable_member();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Provided::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rule_check_proto.Provided)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string entity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entity()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->entity().data(), static_cast<int>(this->entity().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rule_check_proto.Provided.entity"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string member = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_member()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->member().data(), static_cast<int>(this->member().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rule_check_proto.Provided.member"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rule_check_proto.Provided)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rule_check_proto.Provided)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Provided::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rule_check_proto.Provided)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity = 1;
  if (this->entity().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->entity().data(), static_cast<int>(this->entity().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rule_check_proto.Provided.entity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->entity(), output);
  }

  // string member = 2;
  if (this->member().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->member().data(), static_cast<int>(this->member().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rule_check_proto.Provided.member");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->member(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rule_check_proto.Provided)
}

::google::protobuf::uint8* Provided::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rule_check_proto.Provided)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity = 1;
  if (this->entity().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->entity().data(), static_cast<int>(this->entity().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rule_check_proto.Provided.entity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->entity(), target);
  }

  // string member = 2;
  if (this->member().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->member().data(), static_cast<int>(this->member().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rule_check_proto.Provided.member");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->member(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rule_check_proto.Provided)
  return target;
}

size_t Provided::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rule_check_proto.Provided)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity = 1;
  if (this->entity().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->entity());
  }

  // string member = 2;
  if (this->member().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->member());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Provided::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rule_check_proto.Provided)
  GOOGLE_DCHECK_NE(&from, this);
  const Provided* source =
      ::google::protobuf::DynamicCastToGenerated<Provided>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rule_check_proto.Provided)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rule_check_proto.Provided)
    MergeFrom(*source);
  }
}

void Provided::MergeFrom(const Provided& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rule_check_proto.Provided)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity().size() > 0) {

    entity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_);
  }
  if (from.member().size() > 0) {

    member_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.member_);
  }
}

void Provided::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rule_check_proto.Provided)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Provided::CopyFrom(const Provided& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rule_check_proto.Provided)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Provided::IsInitialized() const {
  return true;
}

void Provided::Swap(Provided* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Provided::InternalSwap(Provided* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entity_.Swap(&other->entity_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  member_.Swap(&other->member_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Provided::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_EntityQuery_2eproto);
  return ::file_level_metadata_EntityQuery_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Within::InitAsDefaultInstance() {
}
class Within::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Within::kValueFieldNumber;
const int Within::kUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Within::Within()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rule_check_proto.Within)
}
Within::Within(const Within& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&value_)) + sizeof(unit_));
  // @@protoc_insertion_point(copy_constructor:rule_check_proto.Within)
}

void Within::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unit_) -
      reinterpret_cast<char*>(&value_)) + sizeof(unit_));
}

Within::~Within() {
  // @@protoc_insertion_point(destructor:rule_check_proto.Within)
  SharedDtor();
}

void Within::SharedDtor() {
}

void Within::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Within& Within::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Within_EntityQuery_2eproto.base);
  return *internal_default_instance();
}


void Within::Clear() {
// @@protoc_insertion_point(message_clear_start:rule_check_proto.Within)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unit_) -
      reinterpret_cast<char*>(&value_)) + sizeof(unit_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Within::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Within*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .rule_check_proto.Within.UNIT unit = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_unit(static_cast<::rule_check_proto::Within_UNIT>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Within::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rule_check_proto.Within)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rule_check_proto.Within.UNIT unit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_unit(static_cast< ::rule_check_proto::Within_UNIT >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rule_check_proto.Within)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rule_check_proto.Within)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Within::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rule_check_proto.Within)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->value(), output);
  }

  // .rule_check_proto.Within.UNIT unit = 2;
  if (this->unit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->unit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rule_check_proto.Within)
}

::google::protobuf::uint8* Within::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rule_check_proto.Within)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->value(), target);
  }

  // .rule_check_proto.Within.UNIT unit = 2;
  if (this->unit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->unit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rule_check_proto.Within)
  return target;
}

size_t Within::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rule_check_proto.Within)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->value());
  }

  // .rule_check_proto.Within.UNIT unit = 2;
  if (this->unit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Within::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rule_check_proto.Within)
  GOOGLE_DCHECK_NE(&from, this);
  const Within* source =
      ::google::protobuf::DynamicCastToGenerated<Within>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rule_check_proto.Within)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rule_check_proto.Within)
    MergeFrom(*source);
  }
}

void Within::MergeFrom(const Within& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rule_check_proto.Within)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.unit() != 0) {
    set_unit(from.unit());
  }
}

void Within::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rule_check_proto.Within)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Within::CopyFrom(const Within& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rule_check_proto.Within)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Within::IsInitialized() const {
  return true;
}

void Within::Swap(Within* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Within::InternalSwap(Within* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(unit_, other->unit_);
}

::google::protobuf::Metadata Within::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_EntityQuery_2eproto);
  return ::file_level_metadata_EntityQuery_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Where::InitAsDefaultInstance() {
}
class Where::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Where::kLeftEntityFieldNumber;
const int Where::kLeftMemberFieldNumber;
const int Where::kOperatorFieldNumber;
const int Where::kRightEntityFieldNumber;
const int Where::kRightMemberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Where::Where()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rule_check_proto.Where)
}
Where::Where(const Where& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  left_entity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.left_entity().size() > 0) {
    left_entity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.left_entity_);
  }
  left_member_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.left_member().size() > 0) {
    left_member_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.left_member_);
  }
  right_entity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.right_entity().size() > 0) {
    right_entity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.right_entity_);
  }
  right_member_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.right_member().size() > 0) {
    right_member_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.right_member_);
  }
  operator__ = from.operator__;
  // @@protoc_insertion_point(copy_constructor:rule_check_proto.Where)
}

void Where::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Where_EntityQuery_2eproto.base);
  left_entity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  left_member_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_entity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_member_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operator__ = 0;
}

Where::~Where() {
  // @@protoc_insertion_point(destructor:rule_check_proto.Where)
  SharedDtor();
}

void Where::SharedDtor() {
  left_entity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  left_member_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_entity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_member_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Where::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Where& Where::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Where_EntityQuery_2eproto.base);
  return *internal_default_instance();
}


void Where::Clear() {
// @@protoc_insertion_point(message_clear_start:rule_check_proto.Where)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  left_entity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  left_member_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_entity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_member_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operator__ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Where::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Where*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string left_entity = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("rule_check_proto.Where.left_entity");
        object = msg->mutable_left_entity();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string left_member = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("rule_check_proto.Where.left_member");
        object = msg->mutable_left_member();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .rule_check_proto.Where.OPERATOR operator = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_operator_(static_cast<::rule_check_proto::Where_OPERATOR>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string right_entity = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("rule_check_proto.Where.right_entity");
        object = msg->mutable_right_entity();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string right_member = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("rule_check_proto.Where.right_member");
        object = msg->mutable_right_member();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Where::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rule_check_proto.Where)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string left_entity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_left_entity()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->left_entity().data(), static_cast<int>(this->left_entity().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rule_check_proto.Where.left_entity"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string left_member = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_left_member()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->left_member().data(), static_cast<int>(this->left_member().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rule_check_proto.Where.left_member"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rule_check_proto.Where.OPERATOR operator = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operator_(static_cast< ::rule_check_proto::Where_OPERATOR >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string right_entity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_right_entity()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->right_entity().data(), static_cast<int>(this->right_entity().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rule_check_proto.Where.right_entity"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string right_member = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_right_member()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->right_member().data(), static_cast<int>(this->right_member().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rule_check_proto.Where.right_member"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rule_check_proto.Where)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rule_check_proto.Where)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Where::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rule_check_proto.Where)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string left_entity = 1;
  if (this->left_entity().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->left_entity().data(), static_cast<int>(this->left_entity().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rule_check_proto.Where.left_entity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->left_entity(), output);
  }

  // string left_member = 2;
  if (this->left_member().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->left_member().data(), static_cast<int>(this->left_member().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rule_check_proto.Where.left_member");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->left_member(), output);
  }

  // .rule_check_proto.Where.OPERATOR operator = 3;
  if (this->operator_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operator_(), output);
  }

  // string right_entity = 4;
  if (this->right_entity().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->right_entity().data(), static_cast<int>(this->right_entity().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rule_check_proto.Where.right_entity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->right_entity(), output);
  }

  // string right_member = 5;
  if (this->right_member().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->right_member().data(), static_cast<int>(this->right_member().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rule_check_proto.Where.right_member");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->right_member(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rule_check_proto.Where)
}

::google::protobuf::uint8* Where::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rule_check_proto.Where)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string left_entity = 1;
  if (this->left_entity().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->left_entity().data(), static_cast<int>(this->left_entity().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rule_check_proto.Where.left_entity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->left_entity(), target);
  }

  // string left_member = 2;
  if (this->left_member().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->left_member().data(), static_cast<int>(this->left_member().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rule_check_proto.Where.left_member");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->left_member(), target);
  }

  // .rule_check_proto.Where.OPERATOR operator = 3;
  if (this->operator_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operator_(), target);
  }

  // string right_entity = 4;
  if (this->right_entity().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->right_entity().data(), static_cast<int>(this->right_entity().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rule_check_proto.Where.right_entity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->right_entity(), target);
  }

  // string right_member = 5;
  if (this->right_member().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->right_member().data(), static_cast<int>(this->right_member().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rule_check_proto.Where.right_member");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->right_member(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rule_check_proto.Where)
  return target;
}

size_t Where::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rule_check_proto.Where)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string left_entity = 1;
  if (this->left_entity().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->left_entity());
  }

  // string left_member = 2;
  if (this->left_member().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->left_member());
  }

  // string right_entity = 4;
  if (this->right_entity().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->right_entity());
  }

  // string right_member = 5;
  if (this->right_member().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->right_member());
  }

  // .rule_check_proto.Where.OPERATOR operator = 3;
  if (this->operator_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operator_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Where::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rule_check_proto.Where)
  GOOGLE_DCHECK_NE(&from, this);
  const Where* source =
      ::google::protobuf::DynamicCastToGenerated<Where>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rule_check_proto.Where)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rule_check_proto.Where)
    MergeFrom(*source);
  }
}

void Where::MergeFrom(const Where& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rule_check_proto.Where)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.left_entity().size() > 0) {

    left_entity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.left_entity_);
  }
  if (from.left_member().size() > 0) {

    left_member_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.left_member_);
  }
  if (from.right_entity().size() > 0) {

    right_entity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.right_entity_);
  }
  if (from.right_member().size() > 0) {

    right_member_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.right_member_);
  }
  if (from.operator_() != 0) {
    set_operator_(from.operator_());
  }
}

void Where::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rule_check_proto.Where)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Where::CopyFrom(const Where& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rule_check_proto.Where)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Where::IsInitialized() const {
  return true;
}

void Where::Swap(Where* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Where::InternalSwap(Where* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  left_entity_.Swap(&other->left_entity_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  left_member_.Swap(&other->left_member_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  right_entity_.Swap(&other->right_entity_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  right_member_.Swap(&other->right_member_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(operator__, other->operator__);
}

::google::protobuf::Metadata Where::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_EntityQuery_2eproto);
  return ::file_level_metadata_EntityQuery_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rule_check_proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::rule_check_proto::Constraint* Arena::CreateMaybeMessage< ::rule_check_proto::Constraint >(Arena* arena) {
  return Arena::CreateInternal< ::rule_check_proto::Constraint >(arena);
}
template<> PROTOBUF_NOINLINE ::rule_check_proto::Provided* Arena::CreateMaybeMessage< ::rule_check_proto::Provided >(Arena* arena) {
  return Arena::CreateInternal< ::rule_check_proto::Provided >(arena);
}
template<> PROTOBUF_NOINLINE ::rule_check_proto::Within* Arena::CreateMaybeMessage< ::rule_check_proto::Within >(Arena* arena) {
  return Arena::CreateInternal< ::rule_check_proto::Within >(arena);
}
template<> PROTOBUF_NOINLINE ::rule_check_proto::Where* Arena::CreateMaybeMessage< ::rule_check_proto::Where >(Arena* arena) {
  return Arena::CreateInternal< ::rule_check_proto::Where >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
