// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E2EMessage.proto

#ifndef PROTOBUF_INCLUDED_E2EMessage_2eproto
#define PROTOBUF_INCLUDED_E2EMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Signature.pb.h"
#include "RuleCheck.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_E2EMessage_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_E2EMessage_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_E2EMessage_2eproto();
namespace e2e_message {
class E2ERequest;
class E2ERequestDefaultTypeInternal;
extern E2ERequestDefaultTypeInternal _E2ERequest_default_instance_;
class E2EResponse;
class E2EResponseDefaultTypeInternal;
extern E2EResponseDefaultTypeInternal _E2EResponse_default_instance_;
}  // namespace e2e_message
namespace google {
namespace protobuf {
template<> ::e2e_message::E2ERequest* Arena::CreateMaybeMessage<::e2e_message::E2ERequest>(Arena*);
template<> ::e2e_message::E2EResponse* Arena::CreateMaybeMessage<::e2e_message::E2EResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace e2e_message {

// ===================================================================

class E2ERequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e2e_message.E2ERequest) */ {
 public:
  E2ERequest();
  virtual ~E2ERequest();

  E2ERequest(const E2ERequest& from);

  inline E2ERequest& operator=(const E2ERequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  E2ERequest(E2ERequest&& from) noexcept
    : E2ERequest() {
    *this = ::std::move(from);
  }

  inline E2ERequest& operator=(E2ERequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const E2ERequest& default_instance();

  enum InputCase {
    kRuleCheckInput = 2,
    kSignInput = 3,
    INPUT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const E2ERequest* internal_default_instance() {
    return reinterpret_cast<const E2ERequest*>(
               &_E2ERequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(E2ERequest* other);
  friend void swap(E2ERequest& a, E2ERequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline E2ERequest* New() const final {
    return CreateMaybeMessage<E2ERequest>(nullptr);
  }

  E2ERequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<E2ERequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const E2ERequest& from);
  void MergeFrom(const E2ERequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(E2ERequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 func_id = 1;
  void clear_func_id();
  static const int kFuncIdFieldNumber = 1;
  ::google::protobuf::uint64 func_id() const;
  void set_func_id(::google::protobuf::uint64 value);

  // .e2e_message.RuleCheckRequest rule_check_input = 2;
  bool has_rule_check_input() const;
  void clear_rule_check_input();
  static const int kRuleCheckInputFieldNumber = 2;
  const ::e2e_message::RuleCheckRequest& rule_check_input() const;
  ::e2e_message::RuleCheckRequest* release_rule_check_input();
  ::e2e_message::RuleCheckRequest* mutable_rule_check_input();
  void set_allocated_rule_check_input(::e2e_message::RuleCheckRequest* rule_check_input);

  // .e2e_message.SignInput sign_input = 3;
  bool has_sign_input() const;
  void clear_sign_input();
  static const int kSignInputFieldNumber = 3;
  const ::e2e_message::SignInput& sign_input() const;
  ::e2e_message::SignInput* release_sign_input();
  ::e2e_message::SignInput* mutable_sign_input();
  void set_allocated_sign_input(::e2e_message::SignInput* sign_input);

  void clear_input();
  InputCase input_case() const;
  // @@protoc_insertion_point(class_scope:e2e_message.E2ERequest)
 private:
  class HasBitSetters;
  void set_has_rule_check_input();
  void set_has_sign_input();

  inline bool has_input() const;
  inline void clear_has_input();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 func_id_;
  union InputUnion {
    InputUnion() {}
    ::e2e_message::RuleCheckRequest* rule_check_input_;
    ::e2e_message::SignInput* sign_input_;
  } input_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_E2EMessage_2eproto;
};
// -------------------------------------------------------------------

class E2EResponse :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e2e_message.E2EResponse) */ {
 public:
  E2EResponse();
  virtual ~E2EResponse();

  E2EResponse(const E2EResponse& from);

  inline E2EResponse& operator=(const E2EResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  E2EResponse(E2EResponse&& from) noexcept
    : E2EResponse() {
    *this = ::std::move(from);
  }

  inline E2EResponse& operator=(E2EResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const E2EResponse& default_instance();

  enum OutputCase {
    kRuleCheckOutput = 1,
    kSignOutput = 2,
    OUTPUT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const E2EResponse* internal_default_instance() {
    return reinterpret_cast<const E2EResponse*>(
               &_E2EResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(E2EResponse* other);
  friend void swap(E2EResponse& a, E2EResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline E2EResponse* New() const final {
    return CreateMaybeMessage<E2EResponse>(nullptr);
  }

  E2EResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<E2EResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const E2EResponse& from);
  void MergeFrom(const E2EResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(E2EResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .e2e_message.RuleCheckResponse rule_check_output = 1;
  bool has_rule_check_output() const;
  void clear_rule_check_output();
  static const int kRuleCheckOutputFieldNumber = 1;
  const ::e2e_message::RuleCheckResponse& rule_check_output() const;
  ::e2e_message::RuleCheckResponse* release_rule_check_output();
  ::e2e_message::RuleCheckResponse* mutable_rule_check_output();
  void set_allocated_rule_check_output(::e2e_message::RuleCheckResponse* rule_check_output);

  // .e2e_message.SignOutput sign_output = 2;
  bool has_sign_output() const;
  void clear_sign_output();
  static const int kSignOutputFieldNumber = 2;
  const ::e2e_message::SignOutput& sign_output() const;
  ::e2e_message::SignOutput* release_sign_output();
  ::e2e_message::SignOutput* mutable_sign_output();
  void set_allocated_sign_output(::e2e_message::SignOutput* sign_output);

  void clear_output();
  OutputCase output_case() const;
  // @@protoc_insertion_point(class_scope:e2e_message.E2EResponse)
 private:
  class HasBitSetters;
  void set_has_rule_check_output();
  void set_has_sign_output();

  inline bool has_output() const;
  inline void clear_has_output();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union OutputUnion {
    OutputUnion() {}
    ::e2e_message::RuleCheckResponse* rule_check_output_;
    ::e2e_message::SignOutput* sign_output_;
  } output_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_E2EMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// E2ERequest

// uint64 func_id = 1;
inline void E2ERequest::clear_func_id() {
  func_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 E2ERequest::func_id() const {
  // @@protoc_insertion_point(field_get:e2e_message.E2ERequest.func_id)
  return func_id_;
}
inline void E2ERequest::set_func_id(::google::protobuf::uint64 value) {
  
  func_id_ = value;
  // @@protoc_insertion_point(field_set:e2e_message.E2ERequest.func_id)
}

// .e2e_message.RuleCheckRequest rule_check_input = 2;
inline bool E2ERequest::has_rule_check_input() const {
  return input_case() == kRuleCheckInput;
}
inline void E2ERequest::set_has_rule_check_input() {
  _oneof_case_[0] = kRuleCheckInput;
}
inline ::e2e_message::RuleCheckRequest* E2ERequest::release_rule_check_input() {
  // @@protoc_insertion_point(field_release:e2e_message.E2ERequest.rule_check_input)
  if (has_rule_check_input()) {
    clear_has_input();
      ::e2e_message::RuleCheckRequest* temp = input_.rule_check_input_;
    input_.rule_check_input_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::e2e_message::RuleCheckRequest& E2ERequest::rule_check_input() const {
  // @@protoc_insertion_point(field_get:e2e_message.E2ERequest.rule_check_input)
  return has_rule_check_input()
      ? *input_.rule_check_input_
      : *reinterpret_cast< ::e2e_message::RuleCheckRequest*>(&::e2e_message::_RuleCheckRequest_default_instance_);
}
inline ::e2e_message::RuleCheckRequest* E2ERequest::mutable_rule_check_input() {
  if (!has_rule_check_input()) {
    clear_input();
    set_has_rule_check_input();
    input_.rule_check_input_ = CreateMaybeMessage< ::e2e_message::RuleCheckRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:e2e_message.E2ERequest.rule_check_input)
  return input_.rule_check_input_;
}

// .e2e_message.SignInput sign_input = 3;
inline bool E2ERequest::has_sign_input() const {
  return input_case() == kSignInput;
}
inline void E2ERequest::set_has_sign_input() {
  _oneof_case_[0] = kSignInput;
}
inline ::e2e_message::SignInput* E2ERequest::release_sign_input() {
  // @@protoc_insertion_point(field_release:e2e_message.E2ERequest.sign_input)
  if (has_sign_input()) {
    clear_has_input();
      ::e2e_message::SignInput* temp = input_.sign_input_;
    input_.sign_input_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::e2e_message::SignInput& E2ERequest::sign_input() const {
  // @@protoc_insertion_point(field_get:e2e_message.E2ERequest.sign_input)
  return has_sign_input()
      ? *input_.sign_input_
      : *reinterpret_cast< ::e2e_message::SignInput*>(&::e2e_message::_SignInput_default_instance_);
}
inline ::e2e_message::SignInput* E2ERequest::mutable_sign_input() {
  if (!has_sign_input()) {
    clear_input();
    set_has_sign_input();
    input_.sign_input_ = CreateMaybeMessage< ::e2e_message::SignInput >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:e2e_message.E2ERequest.sign_input)
  return input_.sign_input_;
}

inline bool E2ERequest::has_input() const {
  return input_case() != INPUT_NOT_SET;
}
inline void E2ERequest::clear_has_input() {
  _oneof_case_[0] = INPUT_NOT_SET;
}
inline E2ERequest::InputCase E2ERequest::input_case() const {
  return E2ERequest::InputCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// E2EResponse

// .e2e_message.RuleCheckResponse rule_check_output = 1;
inline bool E2EResponse::has_rule_check_output() const {
  return output_case() == kRuleCheckOutput;
}
inline void E2EResponse::set_has_rule_check_output() {
  _oneof_case_[0] = kRuleCheckOutput;
}
inline ::e2e_message::RuleCheckResponse* E2EResponse::release_rule_check_output() {
  // @@protoc_insertion_point(field_release:e2e_message.E2EResponse.rule_check_output)
  if (has_rule_check_output()) {
    clear_has_output();
      ::e2e_message::RuleCheckResponse* temp = output_.rule_check_output_;
    output_.rule_check_output_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::e2e_message::RuleCheckResponse& E2EResponse::rule_check_output() const {
  // @@protoc_insertion_point(field_get:e2e_message.E2EResponse.rule_check_output)
  return has_rule_check_output()
      ? *output_.rule_check_output_
      : *reinterpret_cast< ::e2e_message::RuleCheckResponse*>(&::e2e_message::_RuleCheckResponse_default_instance_);
}
inline ::e2e_message::RuleCheckResponse* E2EResponse::mutable_rule_check_output() {
  if (!has_rule_check_output()) {
    clear_output();
    set_has_rule_check_output();
    output_.rule_check_output_ = CreateMaybeMessage< ::e2e_message::RuleCheckResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:e2e_message.E2EResponse.rule_check_output)
  return output_.rule_check_output_;
}

// .e2e_message.SignOutput sign_output = 2;
inline bool E2EResponse::has_sign_output() const {
  return output_case() == kSignOutput;
}
inline void E2EResponse::set_has_sign_output() {
  _oneof_case_[0] = kSignOutput;
}
inline ::e2e_message::SignOutput* E2EResponse::release_sign_output() {
  // @@protoc_insertion_point(field_release:e2e_message.E2EResponse.sign_output)
  if (has_sign_output()) {
    clear_has_output();
      ::e2e_message::SignOutput* temp = output_.sign_output_;
    output_.sign_output_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::e2e_message::SignOutput& E2EResponse::sign_output() const {
  // @@protoc_insertion_point(field_get:e2e_message.E2EResponse.sign_output)
  return has_sign_output()
      ? *output_.sign_output_
      : *reinterpret_cast< ::e2e_message::SignOutput*>(&::e2e_message::_SignOutput_default_instance_);
}
inline ::e2e_message::SignOutput* E2EResponse::mutable_sign_output() {
  if (!has_sign_output()) {
    clear_output();
    set_has_sign_output();
    output_.sign_output_ = CreateMaybeMessage< ::e2e_message::SignOutput >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:e2e_message.E2EResponse.sign_output)
  return output_.sign_output_;
}

inline bool E2EResponse::has_output() const {
  return output_case() != OUTPUT_NOT_SET;
}
inline void E2EResponse::clear_has_output() {
  _oneof_case_[0] = OUTPUT_NOT_SET;
}
inline E2EResponse::OutputCase E2EResponse::output_case() const {
  return E2EResponse::OutputCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace e2e_message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_E2EMessage_2eproto
